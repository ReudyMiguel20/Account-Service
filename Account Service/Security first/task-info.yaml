type: edu
custom_name: Security first!
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, String> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, String value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String paymentApi = "/api/empl/payment";
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();

      private final String jDShortPass1 = new TestReq().setProps("new_password", "o").toJson();
      private final String jDShortPass2 = new TestReq().setProps("new_password", "oM").toJson();
      private final String jDShortPass3 = new TestReq().setProps("new_password", "oMo").toJson();
      private final String jDShortPass4 = new TestReq().setProps("new_password", "oMoa").toJson();
      private final String jDShortPass5 = new TestReq().setProps("new_password", "oMoa3").toJson();
      private final String jDShortPass6 = new TestReq().setProps("new_password", "oMoa3V").toJson();
      private final String jDShortPass7 = new TestReq().setProps("new_password", "oMoa3Vv").toJson();
      private final String jDShortPass8 = new TestReq().setProps("new_password", "oMoa3Vvq").toJson();
      private final String jDShortPass9 = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDShortPass10 = new TestReq().setProps("new_password", "oMoa3Vvqno").toJson();
      private final String jDShortPass11 = new TestReq().setProps("new_password", "oMoa3VvqnoM").toJson();


      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      /**
       * Method for checking status code of response Post request for API
       *
       * @param api testing api (String)
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostApi(String api, String body, int status, String message) {
        HttpResponse response = post(api, body).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      CheckResult testPostApiWithAuth(String api, String body, int status, String login, String pass, String message) {
        HttpResponse response = post(api, body).basicAuth(login, pass).send();

        if (response.getStatusCode() == 404) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + "Endpoint not found!" + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApi(String api, int status, String message) {
        HttpResponse response = get(api).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @param login login
       * @param password password
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApiAuth(String api, int status, String login, String password, String message) {
        HttpResponse response = get(api).basicAuth(login, password).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status) {
        HttpResponse response = post(signUpApi, body).send();
        testPostApi(signUpApi, body, status, "API must be available");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString()))));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = get(paymentApi).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("Get " + paymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Authentication with " + login + " / " + password);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", userJson.get("name").getAsString())
                          .value("lastname", userJson.get("lastname").getAsString())
                          .value("email", isString(s -> s.equalsIgnoreCase(userJson.get("email").getAsString()))));
        }
        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user, String answer) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String pass = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = post(api, body).basicAuth(login, pass).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", answer));
        }
        if (status == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", answer)
                          .value("path", "/api/auth/changepass")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + getPrettyJson(json) + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Test wrong POST request for signup api
              () -> testPostApi(signUpApi, jDEmptyName, 400, "Empty name field!"),
              () -> testPostApi(signUpApi, jDNoName, 400, "Name field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyLastName, 400, "Empty lastname field!"),
              () -> testPostApi(signUpApi, jDNoLastName, 400, "Lastname field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyEmail, 400, "Empty email field!"),
              () -> testPostApi(signUpApi, jDNoEmail, 400, "Email field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyPassword, 400, "Empty password field!"),
              () -> testPostApi(signUpApi, jDNoPassword, 400, "Password field is absent!"),
              () -> testPostApi(signUpApi, jDWrongEmail1, 400, "Wrong email!"),
              () -> testPostApi(signUpApi, jDWrongEmail2, 400, "Wrong email!"),
              // Test user registration on signup api
              // Test user registration on signup api
              () -> testBreachedPass(signUpApi, "", "",
                      jDCorrectUser, "Sending password from breached list"),
              () -> testPostSignUpResponse(jDCorrectUser, 200),
              () -> testPostApi(signUpApi, jDCorrectUser, 400, "User must be unique!"),
              () -> testUserDuplicates(jDCorrectUser),
              () -> testPostApi(signUpApi, jDLower, 400, "User must be unique (ignorecase)!"),
              () -> testPostSignUpResponse(maxMusLower, 200),
              () -> testPostApi(signUpApi, maxMusLower, 400, "User must be unique!"),
              () -> testPostApi(signUpApi, maxMusCorrectUser, 400, "User must be unique (ignorecase)!"),
              // Test authentication, positive tests
              () -> testUserRegistration(jDLower, 200, "User must login!"),
              () -> testUserRegistration(jDCorrectUser, 200, "Login case insensitive!"),
              () -> testUserRegistration(maxMusLower, 200, "User must login!"),
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"),
              // Test authentication, negative tests
              () -> testUserRegistration(jDWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(jDWrongEmail1, 401, "Wrong user!"),
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"),
              () -> testGetApi(paymentApi, 401, "This api only for authenticated user"),
              // Test changing password
              () -> testPostApi(changePassApi, jDDuplicatePass, 401, "This api only for authenticated user"),
              () -> testChangePassword(changePassApi, jDShortPass1, 400, jDCorrectUser,
                      "Password length must be 12 chars minimum!"),
              () -> testChangePassword(changePassApi, jDDuplicatePass, 400, jDCorrectUser,
                      "The passwords must be different!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass1, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass2, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass3, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass4, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass5, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass6, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass7, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass8, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass9, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass10, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass11, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDDuplicatePass, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The passwords must be different!"),
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"),
              // Test persistence
              () -> restartApplication(),
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."),
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser, "The password has been updated successfully"),
              () -> testGetApiAuth(paymentApi, 401,"JohnDoe@acme.com",
                      "oMoa3VvqnLxW", "Password must be changed!"),
              () -> testGetApiAuth(paymentApi, 200,"JohnDoe@acme.com",
                      "aNob5VvqzRtb", "Password must be changed!"),
              () -> testChangePassword(changePassApi, jDPass, 200, maxMusCorrectUser, "The password has been updated successfully"),
              () -> testGetApiAuth(paymentApi, 401,"MaxMustermann@acme.com",
                      "ai0y9bMvyF6G", "Password must be changed!"),
              () -> testGetApiAuth(paymentApi, 200,"MaxMustermann@acme.com",
                      "aNob5VvqzRtb", "Password must be changed!")
      };
    }
  learner_created: false
- name: src/account/repositories/AuthoritiesRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.Authorities;
    import org.springframework.data.jpa.repository.JpaRepository;

    public interface AuthoritiesRepository extends JpaRepository<Authorities, String> {
    }
  learner_created: true
- name: src/account/controllers/ServiceController.java
  visible: true
  text: |
    package account.controllers;

    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    @RequestMapping("/api/admin")
    public class ServiceController {

    }
  learner_created: true
- name: src/account/entities/Authorities.java
  visible: true
  text: |
    package account.entities;

    import jakarta.persistence.*;

    @Entity
    @Table(name = "authorities")
    public class Authorities {

        @Id
        @Column(name = "username", columnDefinition = "VARCHAR_IGNORECASE")
        private String username;


        @Column(name = "authority")
        private String role;

        public Authorities() {
        }

        public Authorities(Employee employee) {
            this.username = employee.getEmail();
            this.role = employee.getRole();
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }
    }
  learner_created: true
- name: src/account/security/SecurityConfig.java
  visible: true
  text: |+
    package account.security;


    //import account.exceptions.RestAuthenticationEntryPoint;

    import account.exceptions.RestAuthenticationEntryPoint;
    import jakarta.servlet.ServletException;
    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
    import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
    import org.springframework.security.authentication.AuthenticationProvider;
    import org.springframework.security.config.Customizer;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.core.userdetails.User;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.provisioning.JdbcUserDetailsManager;
    import org.springframework.security.provisioning.UserDetailsManager;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.security.web.SecurityFilterChain;

    import javax.sql.DataSource;
    import java.io.IOException;


    @Configuration
    public class SecurityConfig {


        @Autowired
        private AuthenticationEntryPoint restAuthenticationEntryPoint;

        @Bean
        public UserDetailsManager userDetailsManager(DataSource dataSource) {
            return new JdbcUserDetailsManager(dataSource);
        }

        @Bean
        public SecurityFilterChain configure(HttpSecurity http) throws Exception {
            http
                    .httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint)
                    .and()
                    .csrf(csrf -> {
                        csrf.disable();
                        csrf.ignoringRequestMatchers("/h2-console/**");
                    })
                    .headers(headers -> headers.frameOptions().disable())
                    .authorizeHttpRequests(auth -> {
                        auth.requestMatchers("/h2-console/**").permitAll();
                        auth.requestMatchers(HttpMethod.POST, "/api/auth/signup", "/actuator/shutdown").permitAll();
                        auth.requestMatchers(HttpMethod.GET,"/api/empl/payment").hasRole("USER");
                        auth.anyRequest().authenticated();
                    });

            http
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS);


            return http.build();
        }

    }





  learner_created: true
- name: src/account/exceptions/RestAuthenticationEntryPoint.java
  visible: true
  text: |+
    package account.exceptions;

    import jakarta.servlet.ServletException;
    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.servlet.HandlerExceptionResolver;

    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }


  learner_created: true
- name: src/account/service/AuthoritiesServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.entities.Authorities;
    import account.entities.Employee;
    import account.repositories.AuthoritiesRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Repository;

    @Repository
    public class AuthoritiesServiceImpl implements AuthoritiesService {

        private AuthoritiesRepository authoritiesRepository;

        @Autowired
        public AuthoritiesServiceImpl(AuthoritiesRepository authoritiesRepository) {
            this.authoritiesRepository = authoritiesRepository;
        }

        @Override
        public void save(Employee employee) {
            Authorities tempAuthority = new Authorities(employee);
            tempAuthority.setUsername(employee.getEmail());
            tempAuthority.setRole("ROLE_USER");
            this.authoritiesRepository.save(tempAuthority);
        }
    }
  learner_created: true
- name: src/account/repositories/EmployeeRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.Employee;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    }
  learner_created: true
- name: src/account/exceptions/UserExistException.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Component;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Some error message")
    public class UserExistException extends RuntimeException {

        public UserExistException() {
            super();
        }

        public UserExistException(String message) {
            super(message);
        }

        public UserExistException(String message, Throwable cause) {
            super(message, cause);
        }

        public UserExistException(Throwable cause) {
            super(cause);
        }

        public UserExistException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }

    }
  learner_created: true
- name: src/account/controllers/AuthenticationController.java
  visible: true
  text: |
    package account.controllers;

    import account.entities.Employee;
    import account.entities.User;
    //import account.exceptions.RestAuthenticationEntryPoint;
    import account.exceptions.UserExistException;
    import account.service.AuthoritiesServiceImpl;
    import account.service.EmployeeServiceImpl;
    import account.service.UserServiceImpl;
    import jakarta.validation.Valid;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    @RestController
    @RequestMapping("/api/auth")
    public class AuthenticationController {

        private EmployeeServiceImpl employeeService;
        private UserServiceImpl userService;
        private AuthoritiesServiceImpl authoritiesService;
    //    private RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Autowired
        public AuthenticationController(EmployeeServiceImpl employeeService, UserServiceImpl userService, AuthoritiesServiceImpl authoritiesService) {
            this.employeeService = employeeService;
            this.userService = userService;
            this.authoritiesService = authoritiesService;
        }


        @PostMapping("/signup")
        public ResponseEntity<?> signUpUser(@Valid @RequestBody Employee employee) {
            boolean userExists = this.employeeService.findEmployeeByEmail(employee.getEmail());
            employee.setEmail(employee.getEmail().toLowerCase());

            if (userExists) {
                throw new UserExistException();
    //            this.restAuthenticationEntryPoint.commence();
            } else {
                this.employeeService.save(employee);
                this.userService.save(employee);
                this.authoritiesService.save(employee);
                return ResponseEntity.ok().body(employee);
            }
        }
    }
  learner_created: true
- name: src/account/service/AuthoritiesService.java
  visible: true
  text: |
    package account.service;

    import account.entities.Employee;

    public interface AuthoritiesService {

        void save(Employee employee);
    }
  learner_created: true
- name: src/account/exceptions/ControllerExceptionHandler.java
  visible: true
  text: |
    package account.exceptions;

    import org.apache.coyote.Response;
    import org.springframework.boot.actuate.autoconfigure.observation.ObservationProperties;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.HttpStatusCode;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import java.time.LocalDateTime;
    import java.util.LinkedHashMap;
    import java.util.Map;

    @ControllerAdvice
    public class ControllerExceptionHandler extends ResponseEntityExceptionHandler {

        @Override
        protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {
            String error = "Bad Request";
            Map<String, Object> body = new LinkedHashMap<>();
            body.put("timestamp", LocalDateTime.now());
            body.put("status", status.value());
            body.put("error", error);
            body.put("path", request.getDescription(false));

            return new ResponseEntity<>(body, headers, status);
        }

        @ExceptionHandler(UserExistException.class)
        public ResponseEntity<CustomErrorMessage> handleUserExists(UserExistException e, WebRequest request) {
            String error = "Bad Request";
            String message = "User exist!";
            String path = "/api/auth/signup";
            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.BAD_REQUEST.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(UnauthorizedUser.class)
        public ResponseEntity<CustomErrorMessage> handleUnauthorized() {
            String error = "Unauthorized";
            String message = "";
            String path = "/api/empl/payment";
            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.UNAUTHORIZED.value(),
                    error,
                    message
                    ,path
            );

            return new ResponseEntity<>(body, HttpStatus.UNAUTHORIZED);

        }
    }
  learner_created: true
- name: src/account/repositories/UserRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.User;
    import org.springframework.data.jpa.repository.JpaRepository;

    public interface UserRepository extends JpaRepository<User, String> {
    }
  learner_created: true
- name: src/account/service/EmployeeService.java
  visible: true
  text: |
    package account.service;

    import account.entities.Employee;

    import java.util.List;

    public interface EmployeeService {

        Employee save(Employee employee);
        Employee getEmployeeByEmail(String email);
        boolean findEmployeeByEmail(String email);
        List<Employee> getAllEmployees();
    }
  learner_created: true
- name: src/account/service/UserServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.repositories.UserRepository;
    import account.entities.Employee;
    import account.entities.User;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Repository;

    import java.util.List;

    @Repository
    public class UserServiceImpl implements UserService {

        private UserRepository userRepository;

        @Autowired
        public UserServiceImpl(UserRepository userRepository) {
            this.userRepository = userRepository;
        }

        @Override
        public void save(Employee employee) {
            User tempUser = new User(employee);
    //        tempUser.setPassword(encoder.encode(tempUser.getPassword()));

            tempUser.setEnabled(1);
            this.userRepository.save(tempUser);
        }

        @Override
        public User findUserByUsername(String username) {
            for (User x : getAllUsers()) {
                if (x.getUsername().equals(username)) {
                    return x;
                }
            }
            return null;
        }

        @Override
        public List<User> getAllUsers() {
            return this.userRepository.findAll();
        }


    }
  learner_created: true
- name: src/account/exceptions/UnauthorizedUser.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;


    public class UnauthorizedUser extends RuntimeException {

        public UnauthorizedUser() {
            super();
        }

        public UnauthorizedUser(String message) {
            super(message);
        }

        public UnauthorizedUser(String message, Throwable cause) {
            super(message, cause);
        }

        public UnauthorizedUser(Throwable cause) {
            super(cause);
        }

        public UnauthorizedUser(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/service/UserService.java
  visible: true
  text: |
    package account.service;

    import account.entities.Employee;
    import account.entities.User;

    import java.util.List;

    public interface UserService {

        void save(Employee employee);
        User findUserByUsername(String username);
        List<User> getAllUsers();
    }
  learner_created: true
- name: src/account/controllers/BusinessLogicController.java
  visible: true
  text: |
    package account.controllers;

    import account.entities.Employee;
    import account.entities.User;
    import account.exceptions.UnauthorizedUser;
    import account.exceptions.UserExistException;
    import account.service.AuthoritiesServiceImpl;
    import account.service.EmployeeServiceImpl;
    import account.service.UserServiceImpl;
    import org.apache.coyote.Response;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.boot.autoconfigure.neo4j.Neo4jProperties;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class BusinessLogicController {

        private EmployeeServiceImpl employeeService;
        private UserServiceImpl userService;
        private AuthoritiesServiceImpl authoritiesService;

        @Autowired
        public BusinessLogicController(EmployeeServiceImpl employeeService, UserServiceImpl userService, AuthoritiesServiceImpl authoritiesService) {
            this.employeeService = employeeService;
            this.userService = userService;
            this.authoritiesService = authoritiesService;
        }

        @GetMapping("/api/empl/payment")
        public ResponseEntity<?> testAuth(Authentication auth) {
            String user = auth.getName().toLowerCase();
            Employee testEmployee = this.employeeService.getEmployeeByEmail(user);

            if (testEmployee == null) {
                return ResponseEntity.badRequest().body("hey");
            } else {
                return ResponseEntity.ok().body(testEmployee);
            }
        }

    }
  learner_created: true
- name: src/account/exceptions/CustomErrorMessage.java
  visible: true
  text: |
    package account.exceptions;

    import java.time.LocalDateTime;

    public class CustomErrorMessage {
        private LocalDateTime timestamp;
        private int status;
        private String error;
        private String message;
        private String path;


        public CustomErrorMessage(LocalDateTime timestamp, int status, String error, String message, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.message = message;
            this.path = path;
        }

        public LocalDateTime getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(LocalDateTime timestamp) {
            this.timestamp = timestamp;
        }

        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }
    }
  learner_created: true
- name: src/account/entities/User.java
  visible: true
  text: |
    package account.entities;

    import jakarta.persistence.*;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.Collections;
    import java.util.List;

    @Entity
    @Table(name = "users")
    public class User implements UserDetails {

        @Id
        @Column(name = "username", columnDefinition = "VARCHAR_IGNORECASE")
        private String username;

        @Column(name = "password")
        private String password;

        @Column(name = "enabled")
        private int enabled;

        public User() {
        }

        public User(Employee employee) {
            this.username = employee.getEmail();
            this.password = employee.getPassword();
        }

        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return Collections.emptyList();
        }

        public String getPassword() {
            return password;
        }

        public int getEnabled() {
            return enabled;
        }

        public void setEnabled(int enabled) {
            this.enabled = enabled;
        }

    }
  learner_created: true
- name: src/account/entities/Employee.java
  visible: true
  text: |
    package account.entities;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;
    import jakarta.persistence.*;
    import jakarta.validation.constraints.Email;
    import jakarta.validation.constraints.NotEmpty;
    import jakarta.validation.constraints.NotNull;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;

    import java.util.Collection;


    @JsonPropertyOrder({"id", "name", "lastname", "email"})
    @Entity
    @Table(name = "Employees")
    public class Employee {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id")
        private long id;

        @NotEmpty
        @JsonProperty(value = "name")
        @Column(name = "name")
        private String name;

        @NotEmpty
        @JsonProperty(value = "lastname")
        @Column(name = "last_name")
        private String lastName;

        @NotEmpty
        @JsonProperty(value = "email")
        @Email(regexp = "\\w+(@acme.com)$")

        @Column(name = "email", columnDefinition = "VARCHAR_IGNORECASE")
        private String email;

        @NotEmpty
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @Column(name = "password")
        private String password;

        @Column(name = "ROLE")
        @JsonIgnore
        private String role;

        public Employee() {
        }

        public Employee(@NotNull String name, @NotNull String lastName, @NotNull String email, @NotNull String password) {
            this.name = name;
            this.lastName = lastName;
            this.email = email;
            this.password = "{noop}" + password;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastName() {
            return lastName;
        }

        public void setLastName(String lastName) {
            this.lastName = lastName;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return this.password;
        }

        public void setPassword(String password) {
            this.password = "{noop}" + password;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = "ROLE_" + role;
        }

        @Override
        public String toString() {
            return "User{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", lastName='" + lastName + '\'' +
                    ", email='" + email + '\'' +
                    ", password='" + password + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/account/service/EmployeeServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.repositories.EmployeeRepository;
    import account.entities.Employee;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Repository;

    import java.util.List;

    @Repository
    public class EmployeeServiceImpl implements EmployeeService {

        private EmployeeRepository employeeRepository;

        @Autowired
        public EmployeeServiceImpl(EmployeeRepository employeeRepository) {
            this.employeeRepository = employeeRepository;
        }


        @Override
        public Employee save(Employee employee) {
            employee.setRole("USER");
    //        employee.setEmail(employee.getEmail().toLowerCase());
            return this.employeeRepository.save(employee);
        }

        @Override
        public Employee getEmployeeByEmail(String email) {
            for (Employee x : getAllEmployees()) {
                if (x.getEmail().equalsIgnoreCase(email)) {
                    return x;
                }
            }
            return null;
        }

        @Override
        public boolean findEmployeeByEmail(String email) {
            for (Employee x : getAllEmployees()) {
                if (x.getEmail().equalsIgnoreCase(email)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public List<Employee> getAllEmployees() {
            return this.employeeRepository.findAll();
        }
    }
  learner_created: true
- name: src/account/BreachedPasswords.java
  visible: true
  learner_created: true
- name: src/account/exceptions/BreachedPassword.java
  visible: true
  learner_created: true
- name: src/account/dto/SuccessfulPassword.java
  visible: true
  learner_created: true
- name: src/account/dto/PasswordChange.java
  visible: true
  learner_created: true
- name: src/account/exceptions/SamePassword.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/217/stages/1088/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 21 Jun 2023 19:48:12 UTC"
record: 3
