type: edu
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String adminApi = "/api/admin/user/";


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");
      private final TestReq ivanHoe = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Hoe")
              .setProps("email", "IvanHoe@acme.com")
              .setProps("password", "nWza98hjkLPE");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String ivanHoeCorrectUser = ivanHoe.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
      private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private String paymentsList = convert(new String[]{
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 654321).toJson(),
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 987).toJson(),
              new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 21).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 456789).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 12).toJson()
      });
      private final String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "13-2021").setProps("salary", 123456).toJson()});
      private  String wrongPaymentListSalary = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "11-2022").setProps("salary", -1).toJson()});
      private final String wrongPaymentListDuplicate = convert(new String[]{
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 456789).toJson()
      });
      private final String updatePayment = new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
              .setProps("salary", 77777).toJson();
      private final String updatePaymentResponse = new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
              .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
      private final String updatePaymentWrongDate = new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
      private final String updatePaymentWrongSalary = new TestReq().setProps("employee", "maxmustermann@acme.com")
              .setProps("period", "11-2022").setProps("salary", -1).toJson();
      private final String correctPaymentResponse = convert(new String[]{
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
              new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
      });
      private final String correctPaymentResponseIvanov = convert(new String[]{
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 21 cent(s)").toJson(),
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "February-2021").setProps("salary", "9 dollar(s) 87 cent(s)").toJson(),
              new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("period", "January-2021").setProps("salary", "6543 dollar(s) 21 cent(s)").toJson()
      });
      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 4).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String thirdResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").
                      setProps("roles", new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}).toJson()
      });
      private final String fourthResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 4).setProps("name", "Ivan").setProps("lastname", "Hoe")
                      .setProps("email", "ivanhoe@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }


      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);

        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }


        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for check the prohibition of requests specified types
       *
       * @param api testing api (String)
       * @param deniedMethods list of prohibited type requests
       * @param body string representation of body content in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testDeniedMethods(String api, List<String> deniedMethods, String body) {

        HttpRequest getReq = get(api);
        HttpRequest postReq = post(api, body);
        HttpRequest putReq = put(api, body);
        HttpRequest deleteReq = delete(api);

        Map<String, HttpRequest> methodsMap = new LinkedHashMap<String,  HttpRequest>() {{
          put("get", getReq);
          put("post", postReq);
          put("put", putReq);
          put("delete", deleteReq);
        }};

        for (Map.Entry<String, HttpRequest> entry : methodsMap.entrySet()) {
          if (deniedMethods.contains(entry.getKey())) {
            HttpResponse response = entry.getValue().send();
            if (response.getStatusCode() != 405) {
              return CheckResult.wrong("Method " + entry.getKey().toUpperCase() + " is not allowed for " + api + " status code should be " +
                      "405, responded: " + response.getStatusCode());
            }
          }
        }
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + json.toString() + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }


      CheckResult testPostPaymentResponse(String user, String body, int status, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "POST", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Added successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutPaymentResponse(String user, String body, int status, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Updated successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi , "GET", message);

        JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());
        }

        if (responseJson.size() == 0)  {
          return CheckResult.wrong("No data in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (correctJson.size() != responseJson.size()) {
          return CheckResult.wrong("New data should not be added" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            if (!responseJson.get(i).equals(correctJson.get(i))) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(responseJson) + "\n"
                      + "must be " + getPrettyJson(correctJson));
            }
          }
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        JsonObject json = getJson(correctResponse).getAsJsonObject();
        JsonObject jsonRequest = getJson(request).getAsJsonObject();
        String param = jsonRequest.get("period").getAsString();
        HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          throw new WrongAnswer("GET" + " " + getEmployeePaymentApi + "?" + param + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        // Check JSON in response
        if (response.getStatusCode() == 200) {
          if (!response.getJson().equals(json)) {
            return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                    + " wrong data in response body" + "\n"
                    + "in response " + getPrettyJson(response.getJson()) + "\n"
                    + "must be " + getPrettyJson(json));
          }
        }

        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/empl/payment")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());
        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();


        if (responseJson.size() == 0)  {
          return CheckResult.wrong("No data in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (responseJson.size() != correctJson.size())  {
          return CheckResult.wrong("Wrong dataa in response body" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }


        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }
            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }


      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Testing user registration negative tests
              () -> testApi(null, jDEmptyName, 400, signUpApi, "POST", "Empty name field!"), // 1
              () -> testApi(null, jDNoName, 400, signUpApi, "POST", "Name field is absent!"), // 2
              () -> testApi(null, jDEmptyLastName, 400, signUpApi, "POST", "Empty lastname field!"), // 3
              () -> testApi(null, jDNoLastName, 400, signUpApi, "POST", "Lastname field is absent!"), // 4
              () -> testApi(null, jDEmptyEmail, 400, signUpApi, "POST", "Empty email field!"), // 5
              () -> testApi(null, jDNoEmail, 400, signUpApi, "POST", "Email field is absent!"), // 6
              () -> testApi(null, jDEmptyPassword, 400, signUpApi, "POST", "Empty password field!"), // 7
              () -> testApi(null, jDNoPassword, 400, signUpApi, "POST", "Password field is absent!"),// 8
              () -> testApi(null, jDWrongEmail1, 400, signUpApi, "POST", "Wrong email!"), // 9
              () -> testApi(null, jDWrongEmail2, 400, signUpApi, "POST", "Wrong email!"), // 10
              () -> testBreachedPass(signUpApi, "", "", jDCorrectUser,
                      "Sending password from breached list"), // 11

              // Testing user registration positive tests
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 12
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 13
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 14
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 15

    //          // Testing user registration negative tests
              () -> testApi(null, jDCorrectUser, 400, signUpApi, "POST", "User must be unique!"), // 16
              () -> testUserDuplicates(jDCorrectUser), // 17
              () -> testApi(null, jDLower, 400, signUpApi, "POST",
                      "User must be unique (ignorecase)!"), // 18

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 19
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 20
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 21
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 22
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 23
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 24
    //
    //          // Testing changing password
              () -> testApi(null, jDDuplicatePass, 401, changePassApi, "POST",
                      "This api only for authenticated user"), // 25
              () -> testApi(jDCorrectUser, jDShortPass, 400, changePassApi, "POST",
                      "The password length must be at least 12 chars!"), // 26
              () -> testApi(jDCorrectUser, jDDuplicatePass, 400, changePassApi, "POST",
                      "The passwords must be different!"), // 27
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"), // 28
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testApi(jDCorrectUser, "", 401, adminApi, "GET",
                      "Password must be changed!"), // 30
              () -> testApi(jDNewPass, "", 200, adminApi, "GET",
                      "Password must be changed!"), // 31

              // Testing persistence
              () -> restartApplication(), // 32
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 33

              // Testing admin functions
              // Delete user
              () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/", "DELETE",
                      "Api must be available only to admin user"), // 34
              () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/johndoe@acme.com", "DELETE",
                      "Api must be available only to admin user"), // 35
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"), // 36
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 37
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "User must be deleted!"), // 38
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.BAD_REQUEST,
                      jDNewPass, "johndoe@acme.com",
                      "Can't remove ADMINISTRATOR role!", "Trying to delete admin"), // 39
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.NOT_FOUND,
                      jDNewPass, "johndoe@goole.com",
                      "User not found!", "Trying to delete non existing user"), // 40
              () -> testPostSignUpResponse(ivanHoeCorrectUser, 200, new String[] {"ROLE_USER"}), // 41
              () -> testUserRegistration(ivanHoeCorrectUser, 200, "User \"ivanhoe@acme.com\" must be added!"), // 42
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      fourthResponseAdminApi, "User \"ivanhoe@acme.com\" must be added!"), // 43
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                      "ivanhoe@acme.com", "Deleted successfully!", "Trying to delete user \"ivanhoe@acme.com\""), // 44

              // Testing persistence
              () -> restartApplication(), // 45
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "User must be deleted!"), // 46



              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""), // 47
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      thirdResponseAdminApi, "Role must be changed!"), // 48
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, ""),
              () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                      secondResponseAdminApi, "Role must be changed!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                      ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""),

              // Testing admin functions, negative tests
              () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                      ivanIvanovCorrectUser, "NEW_ROLE", "GRANT",
                      new String[] {"Role not found!"}, "Trying add not existing role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      ivanIvanovCorrectUser, "ADMINISTRATOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDNewPass, "USER", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add business role to administrator!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDNewPass, "ADMINISTRATOR", "REMOVE",
                      new String[] {"Can't remove ADMINISTRATOR role!"}, "Trying remove administrator role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      maxMusCorrectUser, "USER", "REMOVE",
                      new String[] {"The user must have at least one role!"}, "Trying remove single role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      maxMusCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"The user does not have a role!"}, "Trying remove not granted role!"),
              () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                      captainNemoWrongUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"User not found!"}, "Trying remove role from non existing user!"),

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative("/api/admin/user/", "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative("/api/admin/user", "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"),
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"),
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"),
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"),

              // Testing business logic
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, paymentsList, 200, "Payment list must be added"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testGetPaymentResponse(ivanIvanovCorrectUser, 200, correctPaymentResponseIvanov,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListSalary, 400, "Wrong salary in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListData, 400, "Wrong data in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"),
              () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongDate, 400,"Wrong date in request body!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongSalary, 400, "Wrong salary in request body!"),
              () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePayment, 200, "Salary must be update!"),
              () -> testGetPaymentResponseParam(maxMusCorrectUser, 200, updatePayment, updatePaymentResponse,
                      "Salary must be update!"),
              () -> testGetPaymentResponseParam(maxMusCorrectUser, 400, updatePaymentWrongDate, updatePaymentResponse,
                      "Wrong date in request!"),
      };

    }
  learner_created: false
- name: src/account/repositories/EmployeePayrollRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.EmployeePayroll;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface EmployeePayrollRepository extends JpaRepository<EmployeePayroll, Long> {
    }
  learner_created: true
- name: src/account/service/EmployeePayrollServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.dto.UploadPayroll;
    import account.entities.Employee;
    import account.entities.EmployeePayroll;
    import account.exceptions.BadRequest;
    import account.repositories.EmployeePayrollRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;
    import java.util.ArrayList;
    import java.util.List;

    @Service
    public class EmployeePayrollServiceImpl implements EmployeePayrollService {

        private EmployeePayrollRepository employeePayrollRepository;

        @Autowired
        public EmployeePayrollServiceImpl(EmployeePayrollRepository employeePayrollRepository) {
            this.employeePayrollRepository = employeePayrollRepository;
        }


        @Override
        public void save(EmployeePayroll employeePayroll) {
            this.employeePayrollRepository.save(employeePayroll);
        }

        @Override
        public String dateYearMonthFormatter(String period) {
            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("MM-yyyy");
            YearMonth yearMonth = YearMonth.parse(period, inputFormatter);

            DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("MMMM-yyyy");

            period = yearMonth.format(outputFormatter);
            return period;
        }
    }
  learner_created: true
- name: src/account/dto/MessageStatus.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;

    @JsonPropertyOrder({"username", "status"})
    public class MessageStatus {

        @JsonProperty(value = "username")
        private String username;

        @JsonProperty(value = "status")
        private String status;

        public MessageStatus() {
        }

        public MessageStatus(String user, String status) {
            this.username = user;
            this.status = status;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }

        @Override
        public String toString() {
            return "MessageStatus{" +
                    "username='" + username + '\'' +
                    ", status='" + status + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/account/exceptions/SamePassword.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The passwords must be different!")
    public class SamePassword extends RuntimeException {

        public SamePassword() {
            super();
        }

        public SamePassword(String message) {
            super(message);
        }

        public SamePassword(String message, Throwable cause) {
            super(message, cause);
        }

        public SamePassword(Throwable cause) {
            super(cause);
        }

        public SamePassword(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/controllers/ServiceController.java
  visible: true
  text: |
    package account.controllers;

    import account.BreachedPasswords;
    import account.dto.AssignUserRole;
    import account.dto.MessageStatus;
    import account.entities.Authorities;
    import account.entities.Employee;
    import account.exceptions.BadRequest;
    import account.exceptions.UserNotFound;
    import account.service.AuthoritiesServiceImpl;
    import account.service.EmployeeServiceImpl;
    import account.service.UserServiceImpl;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.web.bind.annotation.*;


    @RestController
    @RequestMapping("/api/admin")
    public class ServiceController {

        private EmployeeServiceImpl employeeService;
        private AuthoritiesServiceImpl authoritiesService;

        @Autowired
        public ServiceController(EmployeeServiceImpl employeeService, AuthoritiesServiceImpl authoritiesService) {
            this.employeeService = employeeService;
            this.authoritiesService = authoritiesService;
        }

        @PutMapping("/user/role")
        public ResponseEntity<?> setUserRole(@RequestBody AssignUserRole assignUserRole) {
            Employee tempEmployee = this.employeeService.getEmployeeByEmail(assignUserRole.getUsername());
            String role = assignUserRole.getRole();
            String operation = assignUserRole.getOperation();

            if (tempEmployee == null) {
                throw new UserNotFound();
            } else {
                this.employeeService.removeOrGrant(assignUserRole);
                return ResponseEntity.ok().body(tempEmployee);
            }
        }


        @DeleteMapping("/user/{username}")
        public ResponseEntity<?> deleteUser(@PathVariable String username) {
            Employee tempEmployee = this.employeeService.getEmployeeByEmail(username);

            if (tempEmployee == null) {
                //throw exception
                throw new UserNotFound();
            } else {
                this.employeeService.deleteEmployee(tempEmployee);
                MessageStatus messageStatus = new MessageStatus(username, "Deleted successfully!");
                return ResponseEntity.ok().body(messageStatus);
            }
        }


        @GetMapping("/user")
        public ResponseEntity<?> getAllUsers() {
            if (this.authoritiesService.howManyUsersWithAuthorities() == 0) {
                return ResponseEntity.badRequest().build();
            } else {
                return ResponseEntity.ok().body(this.employeeService.getAllEmployees());
            }
        }

    }
  learner_created: true
- name: src/account/config/SecurityConfig.java
  visible: true
  text: |+
    package account.config;


    //import account.exceptions.RestAuthenticationEntryPoint;

    import account.exceptions.RestAuthenticationEntryPoint;
    import jakarta.servlet.ServletException;
    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
    import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
    import org.springframework.security.authentication.AuthenticationProvider;
    import org.springframework.security.config.Customizer;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.core.userdetails.User;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.provisioning.JdbcUserDetailsManager;
    import org.springframework.security.provisioning.UserDetailsManager;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.security.web.SecurityFilterChain;

    import javax.sql.DataSource;
    import java.io.IOException;
    import java.util.List;


    @Configuration
    public class SecurityConfig {
        @Autowired
        private AuthenticationEntryPoint restAuthenticationEntryPoint;

        @Bean
        public UserDetailsManager userDetailsManager(DataSource dataSource) {
            return new JdbcUserDetailsManager(dataSource);
        }

        @Bean
        public SecurityFilterChain configure(HttpSecurity http) throws Exception {
            http
                    .httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint)
                    .and()
                    .csrf(csrf -> {
                        csrf.disable();
                        csrf.ignoringRequestMatchers("/h2-console/**");
                    })
                    .headers(headers -> headers.frameOptions().disable())
                    .authorizeHttpRequests(auth -> {
                        auth.requestMatchers("/h2-console/**").permitAll();
                        auth.requestMatchers(HttpMethod.POST, "/api/auth/signup", "/actuator/shutdown").permitAll();
                        auth.requestMatchers(HttpMethod.POST,"/api/auth/changepass").hasRole("USER");
                        auth.requestMatchers(HttpMethod.GET,"/api/empl/payment").hasRole("USER");
                        auth.requestMatchers(HttpMethod.GET,"/api/admin/user/role").hasRole("ADMIN");
                        auth.anyRequest().permitAll();
                    });

            http
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS);


            return http.build();
        }

        @Bean
        public PasswordEncoder encoder() {
            return new BCryptPasswordEncoder(13);
        }

    }





  learner_created: true
- name: src/account/service/AuthoritiesServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.entities.Authorities;
    import account.entities.Employee;
    import account.exceptions.*;
    import account.repositories.AuthoritiesRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;
    import org.springframework.web.bind.annotation.ResponseStatus;

    import javax.management.relation.Role;
    import java.util.List;

    @Service
    @Transactional
    public class AuthoritiesServiceImpl implements AuthoritiesService {

        private AuthoritiesRepository authoritiesRepository;

        @Autowired
        public AuthoritiesServiceImpl(AuthoritiesRepository authoritiesRepository) {
            this.authoritiesRepository = authoritiesRepository;
        }

        /* Pretty self-explanatory method of creating a new Authority, if there's no user in the database then the first
           user will always be an admin, the rest will be normal users. */
        @Override
        public void save(Employee employee) {
            Authorities tempAuthority = assignRoleNewUser(employee);
            this.authoritiesRepository.save(tempAuthority);
        }

        @Override
        public void saveNewAuthority(Authorities tempAuthority) {
            this.authoritiesRepository.save(tempAuthority);
        }


        @Override
        public Employee grantAuthority(Employee employee, String role) {
            if (isUserAdmin(employee)) {
                //throw new exception for an admin cannot have additional roles
                throw new CannotCombineRoles();
            } else if (!checkForDuplicateRoles(employee, role)) {
                return assignCustomRole(employee, role);
            } else {
                throw new UserNotFound();
    //            return null;
            }
        }

        @Override
        public void deleteAuthority(Authorities authority) {
            for (Authorities userAuthority : getAllAuthorities()) {
                if (userAuthority.getRole().equalsIgnoreCase(authority.getRole()) && userAuthority.getUsername().equalsIgnoreCase(authority.getUsername())) {
                    this.authoritiesRepository.delete(userAuthority);
                }
            }
        }

        @Override
        public boolean checkForDuplicateRoles(Employee employee, String role) {
            for (String employeeRoles : employee.getRole()) {
                if (employeeRoles.equalsIgnoreCase("ROLE_" + role)) {
                    //Throw an exception here
                    throw new BadRequest();
                }
            }
            return false;
        }

        @Override
        public Employee deleteUserRole(Employee employee, String role) {
            Authorities tempAuthority = new Authorities(employee, role);

            if (employee.getRole().size() == 1) {
                throw new UserMustHaveOneRole();
            }

            for (String employeeRoles : employee.getRole()) {
                if (employeeRoles.equalsIgnoreCase("ROLE_" + role)) {
                    employee.removeRole("ROLE_" + role);
                    deleteAuthority(tempAuthority);
                    return employee;
                }
            }
            throw new UserRoleDoesntExist();
        }

        @Override
        public Authorities assignRoleNewUser(Employee employee) {
            Authorities tempAuthority = new Authorities(employee);
            tempAuthority.setUsername(employee.getEmail());

            if (!isThereOnlyOneUser()) {
                tempAuthority.setRole("USER");
                employee.setRole("USER");
            } else {
                tempAuthority.setRole("ADMIN");
                employee.setRole("ADMIN");
            }

            return tempAuthority;
        }

        @Override
        public Employee assignCustomRole(Employee employee, String role) {
            if (!role.equalsIgnoreCase("ACCOUNTANT") && !role.equalsIgnoreCase("USER")) {
                throw new RoleNotFound();
            }

            Authorities tempAuthority = new Authorities(employee, role);
            saveNewAuthority(tempAuthority);

            employee.setRole(role);
            return employee;
        }

        @Override
        public boolean isThereOnlyOneUser() {
            return howManyUsersWithAuthorities() == 0;
        }

        @Override
        public void deleteAllRoles(String username) {
            for (Authorities x : getAllAuthorities()) {
                if (x.getUsername().equalsIgnoreCase(username)) {
                    if (x.getRole().equalsIgnoreCase("ROLE_ADMIN")) {
                        //throw cannot delete admin
                        throw new CannotRemoveAdministrator();
                    }
                    deleteAuthority(x);
                }
            }
        }

        @Override
        public boolean isUserAdmin(Employee employee) {
            for (String role : employee.getRole()) {
                if (role.equalsIgnoreCase("ROLE_ADMIN")) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public int howManyUsersWithAuthorities() {
            return this.authoritiesRepository.findAll().size();
        }

        @Override
        public List<Authorities> getAllAuthorities() {
            return this.authoritiesRepository.findAll();
        }
    }
  learner_created: true
- name: src/account/exceptions/BreachedPassword.java
  visible: true
  text: |
    package account.exceptions;


    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The password is in the hacker's database!")
    public class BreachedPassword extends RuntimeException {

        public BreachedPassword() {
        }

        public BreachedPassword(String message) {
            super(message);
        }

        public BreachedPassword(String message, Throwable cause) {
            super(message, cause);
        }

        public BreachedPassword(Throwable cause) {
            super(cause);
        }

        public BreachedPassword(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/exceptions/UserExistException.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User exist!")
    public class UserExistException extends RuntimeException {

        public UserExistException() {
            super();
        }

        public UserExistException(String message) {
            super(message);
        }

        public UserExistException(String message, Throwable cause) {
            super(message, cause);
        }

        public UserExistException(Throwable cause) {
            super(cause);
        }

        public UserExistException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }

    }
  learner_created: true
- name: src/account/dto/UploadPayroll.java
  visible: true
  text: |
    package account.dto;


    import com.fasterxml.jackson.annotation.JsonFormat;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import jakarta.validation.constraints.*;

    import java.util.Objects;


    @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
    public class UploadPayroll {

        @NotEmpty
        @JsonProperty(value = "employee")
        private String email;

        @NotEmpty
        @JsonProperty(value = "period")
        @Pattern(regexp = "([0][1-9]|[1][0-2])(-{1})(\\d{1,})")
        private String period;

        @Min(value = 0L, message = "Salary can't be negative")
        private Long salary;

        public UploadPayroll() {
        }

        public UploadPayroll(@NotNull String email, @NotNull String period, @NotNull Long salary) {
            this.email = email;
            this.period = period;
            this.salary = salary;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            this.period = period;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            UploadPayroll that = (UploadPayroll) o;
            return Objects.equals(email, that.email) && Objects.equals(period, that.period) && Objects.equals(salary, that.salary);
        }

        @Override
        public int hashCode() {
            return Objects.hash(email, period, salary);
        }

        @Override
        public String toString() {
            return "EmployeePayroll{" +
                    "email='" + email + '\'' +
                    ", yearMonth='" + period + '\'' +
                    ", salary=" + salary +
                    '}';
        }
    }
  learner_created: true
- name: src/account/exceptions/RoleNotFound.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "Role not found!")
    public class RoleNotFound extends RuntimeException{

        public RoleNotFound() {
        }

        public RoleNotFound(String message) {
            super(message);
        }

        public RoleNotFound(String message, Throwable cause) {
            super(message, cause);
        }

        public RoleNotFound(Throwable cause) {
            super(cause);
        }

        public RoleNotFound(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/service/AuthoritiesService.java
  visible: true
  text: |
    package account.service;

    import account.entities.Authorities;
    import account.entities.Employee;

    import java.util.List;

    public interface AuthoritiesService {
        void save(Employee employee);

        void saveNewAuthority(Authorities tempAuthority);

        Employee grantAuthority(Employee employee, String role);

        boolean checkForDuplicateRoles(Employee employee, String role);

        Employee deleteUserRole(Employee employee, String role);

        Authorities assignRoleNewUser(Employee employee);

        Employee assignCustomRole(Employee employee, String role);

    //    void updateAuthorities(Employee employee, String role);

    //    void deleteAuthority(String user);

        void deleteAuthority(Authorities authority);


    //    Authorities assignCustomRole(Employee employee, String authority);

        boolean isThereOnlyOneUser();

        void deleteAllRoles(String username);

        boolean isUserAdmin(Employee employee);

        int howManyUsersWithAuthorities();

        List<Authorities> getAllAuthorities();
    }
  learner_created: true
- name: src/account/exceptions/ControllerExceptionHandler.java
  visible: true
  text: |
    package account.exceptions;

    import jakarta.servlet.http.HttpServletResponse;
    import jakarta.validation.ConstraintViolationException;
    import org.apache.coyote.Response;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.HttpStatusCode;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import java.io.IOException;
    import java.time.LocalDateTime;
    import java.util.LinkedHashMap;
    import java.util.Map;

    @ControllerAdvice
    public class ControllerExceptionHandler extends ResponseEntityExceptionHandler {

        @Override
        protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {
            String error = "Bad Request";
            String message = "Password length must be 12 chars minimum!";

            //Removing 'uri=' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            Map<String, Object> body = new LinkedHashMap<>();
            body.put("timestamp", LocalDateTime.now());
            body.put("status", status.value());
            body.put("error", error);
            body.put("message", message);
            body.put("path", path);

    //        // Custom error messages based on validation errors
    //        List<String> errorMessages = ex.getBindingResult().getFieldErrors().stream()
    //                .map(fieldError -> {
    //                    if (fieldError.getField().equals("password")){
    //                        //Custom error message for password validation
    //                        if (fieldError.getRejectedValue().toString().length() < 12) {
    //                            return "Password length must be 12 chars minimum!";
    //                        }
    //                    }
    //                    return fieldError.getDefaultMessage();
    //                })
    //                .collect(Collectors.toList());

            return new ResponseEntity<>(body, headers, status);
        }

        @ExceptionHandler(UserExistException.class)
        public ResponseEntity<CustomErrorMessage> handleUserExists(UserExistException e, WebRequest request) {
            String error = "Bad Request";
            String message = "User exist!";

            //Removing 'uri=' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.BAD_REQUEST.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(UnauthorizedUser.class)
        public ResponseEntity<CustomErrorMessage> handleUnauthorized(WebRequest request) {
            String error = "Unauthorized";
            String message = "";

            //Removing 'uri=' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.UNAUTHORIZED.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.UNAUTHORIZED);

        }

        @ExceptionHandler(BreachedPassword.class)
        public ResponseEntity<CustomErrorMessage> handlePasswordNotLongEnough(WebRequest request) {
            String error = "Bad Request";
            String message = "The password is in the hacker's database!";

            //Removing 'uri=' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.BAD_REQUEST.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(SamePassword.class)
        public ResponseEntity<CustomErrorMessage> handleSamePassword(WebRequest request) {
            String error = "Bad Request";
            String message = "The passwords must be different!";

            //Removing 'uri=' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.BAD_REQUEST.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }


        @ExceptionHandler(BadRequest.class)
        public ResponseEntity<CustomErrorMessage> badRequest(WebRequest request) {
            String error = "Bad Request";
            String message = "Error!";

            //Removing 'uri"' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.BAD_REQUEST.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler({ConstraintViolationException.class, org.hibernate.exception.ConstraintViolationException.class})
        public void springHandleNotFound(HttpServletResponse response) throws IOException {
            response.sendError(HttpStatus.BAD_REQUEST.value());
        }
    }
  learner_created: true
- name: src/account/service/EmployeeService.java
  visible: true
  text: |
    package account.service;

    import account.dto.AssignUserRole;
    import account.dto.UploadPayroll;
    import account.entities.Employee;
    import account.entities.EmployeePayroll;
    import org.springframework.transaction.annotation.Transactional;
    //import account.entities.EmployeePayment;

    import java.util.List;

    public interface EmployeeService {
        void saveNewEmployee(Employee employee);
        void updateEmployee(Employee employee);
        Employee getEmployeeByEmail(String email);
        void setEmployeePayment(Employee employee, List<UploadPayroll> uploadPayrollList);
        void updatePayrolls(Employee employee, List<UploadPayroll> uploadPayrollList);
        boolean doUserExists(String email);
        EmployeePayroll getSinglePayroll(Employee employee, String period);

    //    void updateEmployeeRole(AssignUserRole assignUserRole);
    //    void updateEmployeeRole(AssignUserRole assignUserRole);

        boolean samePassword(String username, String newPassword);
        boolean breachedPassword(String newPassword);
        Employee changePassword(String username, String newPassword);

        //Probably need to return employee here
        @Transactional
        void removeOrGrant(AssignUserRole assignUserRole);

        void deleteEmployee(Employee employee);

        //    boolean checkForDuplicateRoles(Employee employee, String role);
        List<Employee> getAllEmployees();
    }
  learner_created: true
- name: src/account/dto/StatusSuccessful.java
  visible: true
  text: |
    package account.dto;

    public class StatusSuccessful {
        private String status;

        public StatusSuccessful() {
        }

        public StatusSuccessful(String status) {
            this.status = status;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }
    }
  learner_created: true
- name: src/account/exceptions/UnauthorizedUser.java
  visible: true
  text: |
    package account.exceptions;

    public class UnauthorizedUser extends RuntimeException {

        public UnauthorizedUser() {
            super();
        }

        public UnauthorizedUser(String message) {
            super(message);
        }

        public UnauthorizedUser(String message, Throwable cause) {
            super(message, cause);
        }

        public UnauthorizedUser(Throwable cause) {
            super(cause);
        }

        public UnauthorizedUser(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/exceptions/CustomErrorMessage.java
  visible: true
  text: |
    package account.exceptions;

    import java.time.LocalDateTime;

    public class CustomErrorMessage {
        private LocalDateTime timestamp;
        private int status;
        private String error;
        private String message;
        private String path;

        public CustomErrorMessage(LocalDateTime timestamp, int status, String error, String message, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.message = message;
            this.path = path;
        }

        public LocalDateTime getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(LocalDateTime timestamp) {
            this.timestamp = timestamp;
        }

        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }
    }
  learner_created: true
- name: src/account/exceptions/UserRoleDoesntExist.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The user does not have a role!")
    public class UserRoleDoesntExist extends RuntimeException {

        public UserRoleDoesntExist() {
        }

        public UserRoleDoesntExist(String message) {
            super(message);
        }

        public UserRoleDoesntExist(String message, Throwable cause) {
            super(message, cause);
        }

        public UserRoleDoesntExist(Throwable cause) {
            super(cause);
        }

        public UserRoleDoesntExist(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/entities/Employee.java
  visible: true
  text: "package account.entities;\n\n//import account.entities.EmployeePayment;\n\
    //import account.dto.EmployeePayroll;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\
    import com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\
    import jakarta.persistence.*;\nimport jakarta.validation.constraints.Email;\n\
    import jakarta.validation.constraints.NotEmpty;\nimport jakarta.validation.constraints.NotNull;\n\
    import jakarta.validation.constraints.Size;\n\nimport java.text.ParseException;\n\
    import java.text.SimpleDateFormat;\nimport java.util.*;\n\n@JsonPropertyOrder({\"\
    id\", \"name\", \"lastname\", \"email\", \"roles\"})\n@Entity\n@Table(name = \"\
    Employees\")\npublic class Employee {\n\n    @Id\n    @GeneratedValue(strategy\
    \ = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private long id;\n\
    \n    @NotEmpty\n    @JsonProperty(value = \"name\")\n    @Column(name = \"name\"\
    )\n    private String name;\n\n    @NotEmpty\n    @JsonProperty(value = \"lastname\"\
    )\n    @Column(name = \"last_name\")\n    private String lastName;\n\n    @NotEmpty\n\
    \    @JsonProperty(value = \"email\")\n    @Email(regexp = \"\\\\w+(@acme.com)$\"\
    )\n    @Column(name = \"email\", columnDefinition = \"VARCHAR_IGNORECASE\")\n\
    \    private String email;\n\n    @NotEmpty\n    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n\
    \    @Column(name = \"password\")\n    @Size(min = 12)\n    private String password;\n\
    \n    @Column(name = \"ROLE\")\n    @JsonProperty(value = \"roles\")\n    private\
    \ List<String> role = new ArrayList<>();\n\n//    @Column(name = \"ROLE\")\n//\
    \    @JsonProperty(value = \"roles\")\n//    @OneToMany(mappedBy = \"username\"\
    , cascade = CascadeType.ALL)\n//    private List<Authorities> role = new ArrayList<>();\n\
    \n    @OneToMany(mappedBy = \"employee\", cascade = CascadeType.ALL)\n    @Column(name\
    \ = \"Employee_Payroll\")\n    @ElementCollection\n    @Embedded\n    @JsonIgnore\n\
    \    private List<EmployeePayroll> employeePayrollList = new ArrayList<>();\n\
    \    \n    public Employee() {\n    }\n\n    public Employee(@NotNull String name,\
    \ @NotNull String lastName, @NotNull String email, @NotNull String password) {\n\
    \        this.name = name;\n        this.lastName = lastName;\n        this.email\
    \ = email;\n        this.password = password;\n    }\n\n    public long getId()\
    \ {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id\
    \ = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\
    \n    public void setName(String name) {\n        this.name = name;\n    }\n\n\
    \    public String getLastName() {\n        return lastName;\n    }\n\n    public\
    \ void setLastName(String lastName) {\n        this.lastName = lastName;\n   \
    \ }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public\
    \ void setEmail(String email) {\n        this.email = email;\n    }\n\n    public\
    \ String getPassword() {\n        return this.password;\n    }\n\n    public void\
    \ setPassword(String password) {\n        this.password = password;\n    }\n\n\
    //    public List<Authorities> getRole() {\n//        return role;\n//    }\n\
    //\n//    public void setRole(Authorities authority) {\n//        this.role.add(authority);\n\
    //    }\n\n        public List<String> getRole() {\n        return role;\n   \
    \ }\n\n    public void setRole(String role) {\n        this.role.add(\"ROLE_\"\
    \ + role);\n    }\n\n    public void removeRole(String role) {\n        this.role.remove(role);\n\
    \    }\n\n//        public String getRole() {\n//        return role;\n//    }\n\
    //\n//    public void setRole(String role) {\n//        this.role = \"ROLE_\"\
    \ + role;\n//    }\n\n    @JsonIgnore\n    public List<EmployeePayroll> getEmployeePaymentList()\
    \ {\n        employeePayrollList.sort(periodComparator);\n        return employeePayrollList;\n\
    \    }\n\n    @JsonIgnore\n    public void setEmployeePaymentList(List<EmployeePayroll>\
    \ employeePayrollList) {\n        this.employeePayrollList = employeePayrollList;\n\
    \    }\n\n    public void addEmployeePayroll(EmployeePayroll employeePayroll)\
    \ {\n        this.employeePayrollList.add(employeePayroll);\n    }\n\n    @Transient\n\
    \    Comparator<EmployeePayroll> periodComparator = (o1, o2) -> {\n        SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(\"MMMM-yyyy\", Locale.ENGLISH);\n        try\
    \ {\n            Date date1 = dateFormat.parse(o1.getPeriod());\n            Date\
    \ date2 = dateFormat.parse(o2.getPeriod());\n            return date2.compareTo(date1);\n\
    \        } catch (ParseException e) {\n            e.printStackTrace();\n    \
    \    }\n        return 0;\n    };\n\n\n    @Override\n    public String toString()\
    \ {\n        return \"User{\" +\n                \"id=\" + id +\n            \
    \    \", name='\" + name + '\\'' +\n                \", lastName='\" + lastName\
    \ + '\\'' +\n                \", email='\" + email + '\\'' +\n               \
    \ \", password='\" + password + '\\'' +\n                '}';\n    }\n}\n"
  learner_created: true
- name: src/account/config/AppConfiguration.java
  visible: true
  text: |
    package account.config;

    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.context.annotation.Primary;
    import com.fasterxml.jackson.databind.DeserializationFeature;

    @Configuration
    public class AppConfiguration {
        @Bean
        @Primary
        public ObjectMapper objectMapper() {
            return new ObjectMapper().enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        }
    }
  learner_created: true
- name: src/account/exceptions/UserMustHaveOneRole.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The user must have at least one role!")
    public class UserMustHaveOneRole extends RuntimeException {

        public UserMustHaveOneRole() {
        }

        public UserMustHaveOneRole(String message) {
            super(message);
        }

        public UserMustHaveOneRole(String message, Throwable cause) {
            super(message, cause);
        }

        public UserMustHaveOneRole(Throwable cause) {
            super(cause);
        }

        public UserMustHaveOneRole(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/repositories/AuthoritiesRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.Authorities;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface AuthoritiesRepository extends JpaRepository<Authorities, String> {
    }
  learner_created: true
- name: src/account/BreachedPasswords.java
  visible: true
  text: |
    package account;

    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.List;

    @Component
    public class BreachedPasswords {
        private ArrayList<String> breachedPasswords;

        public BreachedPasswords() {
            this.breachedPasswords = new ArrayList<>(List.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                    "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                    "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"));
        }

        public List<String> listOfBreachedPasswords() {

            List<String> breachedPasswords = new ArrayList<>(this.breachedPasswords);

            return breachedPasswords;
        }

        @Override
        public String toString() {
            return "BreachedPasswords{" +
                    "breachedPasswords=" + breachedPasswords +
                    '}';
        }
    }
  learner_created: true
- name: src/account/exceptions/CannotCombineRoles.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The user cannot combine administrative and business roles!")
    public class CannotCombineRoles extends RuntimeException {

        public CannotCombineRoles() {
        }

        public CannotCombineRoles(String message) {
            super(message);
        }

        public CannotCombineRoles(String message, Throwable cause) {
            super(message, cause);
        }

        public CannotCombineRoles(Throwable cause) {
            super(cause);
        }

        public CannotCombineRoles(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/entities/Authorities.java
  visible: true
  text: |
    package account.entities;

    import jakarta.persistence.*;

    import java.util.List;

    @Entity
    @Table(name = "authorities")
    public class Authorities {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private int authority_id;

        @Column(name = "username", columnDefinition = "VARCHAR_IGNORECASE")
        private String username;

        @Column(name = "authority")
        private String role;

        public Authorities() {
        }

        public Authorities(Employee employee) {
            this.username = employee.getEmail();
            this.role = employee.getEmail();
        }

        public Authorities(Employee employee, String role) {
            this.username = employee.getEmail();
            this.role = "ROLE_" + role;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

    //    public List<String> getRole() {
    //        return role;
    //    }
    //
    //    public void setRole(String role) {
    //        this.role.add(role);
    //    }

            public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = "ROLE_" + role;
        }
    }
  learner_created: true
- name: src/account/entities/EmployeePayroll.java
  visible: true
  text: |
    package account.entities;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import jakarta.persistence.*;

    import java.time.LocalDate;
    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;
    import java.util.Date;
    import java.util.Objects;

    @Entity
    @Table(name = "Employee_Payroll")
    public class EmployeePayroll implements Comparable<EmployeePayroll>{

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id_payroll")
        private long payrollId;

        @JsonIgnore
        @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
        @JoinColumn(name = "user_id")
        private Employee employee;

        private String name;

        private String lastname;

        private String period;

        private String salary;

        public EmployeePayroll() {
        }

        public EmployeePayroll(Employee employee) {
            this.employee = employee;
            this.name = employee.getName();
            this.lastname = employee.getLastName();
        }

        public Employee getEmployee() {
            return employee;
        }

        public void setEmployee(Employee employee) {
            this.employee = employee;
        }

        public void setSalary(String salary) {
            this.salary = salary;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("MM-yyyy");
            YearMonth yearMonth = YearMonth.parse(period, inputFormatter);

            DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("MMMM-yyyy");

            this.period = yearMonth.format(outputFormatter);
        }

        public String getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = String.format("%d dollar(s) %d cent(s)", salary / 100, salary % 100);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            EmployeePayroll that = (EmployeePayroll) o;
            return Objects.equals(name, that.name) && Objects.equals(lastname, that.lastname) && Objects.equals(period, that.period) && Objects.equals(salary, that.salary);
        }

        @Override
        public int hashCode() {
            return Objects.hash(name, lastname, period, salary);
        }


        @Override
        public String toString() {
            return "EmployeePayment{" +
                    "name='" + name + '\'' +
                    ", lastname='" + lastname + '\'' +
                    ", period='" + period + '\'' +
                    ", salary='" + salary + '\'' +
                    '}';
        }

        @Override
        public int compareTo(EmployeePayroll o) {
            return this.period.compareTo(o.getPeriod());
        }
    }
  learner_created: true
- name: src/account/exceptions/BadRequest.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Some error message")
    public class BadRequest extends RuntimeException {

        public BadRequest() {
            super();
        }

        public BadRequest(String message) {
            super(message);
        }

        public BadRequest(String message, Throwable cause) {
            super(message, cause);
        }

        public BadRequest(Throwable cause) {
            super(cause);
        }

        public BadRequest(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/dto/PasswordChange.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import jakarta.validation.constraints.NotEmpty;
    import jakarta.validation.constraints.Size;


    public class PasswordChange {

        @NotEmpty
        @Size(min = 12)
        @JsonProperty(value = "new_password")
        private String newPassword;

        public PasswordChange() {
        }

        public PasswordChange(String newPassword) {
            this.newPassword = newPassword;
        }

        public String getNewPassword() {
            return newPassword;
        }

        public void setNewPassword(String newPassword) {
            this.newPassword = newPassword;
        }
    }
  learner_created: true
- name: src/account/exceptions/RestAuthenticationEntryPoint.java
  visible: true
  text: |+
    package account.exceptions;

    import jakarta.servlet.ServletException;
    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }


  learner_created: true
- name: src/account/exceptions/CannotRemoveAdministrator.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Can't remove ADMINISTRATOR role!")
    public class CannotRemoveAdministrator extends RuntimeException {

        public CannotRemoveAdministrator() {
        }

        public CannotRemoveAdministrator(String message) {
            super(message);
        }

        public CannotRemoveAdministrator(String message, Throwable cause) {
            super(message, cause);
        }

        public CannotRemoveAdministrator(Throwable cause) {
            super(cause);
        }

        public CannotRemoveAdministrator(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/repositories/EmployeeRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.Employee;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    }
  learner_created: true
- name: src/account/dto/AssignUserRole.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.ArrayList;
    import java.util.List;

    public class AssignUserRole {
        @JsonProperty(value = "user")
        private String username;
        @JsonProperty(value = "role")
        private String role;
        @JsonProperty(value = "operation")
        private String operation;

        public AssignUserRole() {
        }

        public AssignUserRole(String username, String role, String operation) {
            this.username = username;
            this.role = role;
            this.operation = operation;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }

        @Override
        public String toString() {
            return "AssignUserRole{" +
                    "username='" + username + '\'' +
                    ", role='" + role + '\'' +
                    ", operation='" + operation + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/account/dto/SuccessfulPassword.java
  visible: true
  text: |
    package account.dto;

    public class SuccessfulPassword {
        private String email;
        private String status;

        public SuccessfulPassword() {
        }

        public SuccessfulPassword(String email, String status) {
            this.email = email;
            this.status = status;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }
    }
  learner_created: true
- name: src/account/service/EmployeePayrollService.java
  visible: true
  text: |
    package account.service;

    import account.entities.EmployeePayroll;

    public interface EmployeePayrollService {

        void save(EmployeePayroll employeePayroll);
        String dateYearMonthFormatter(String period);
    }
  learner_created: true
- name: src/account/controllers/AuthenticationController.java
  visible: true
  text: |
    package account.controllers;

    import account.BreachedPasswords;
    import account.dto.PasswordChange;
    import account.dto.SuccessfulPassword;
    import account.entities.Employee;
    import account.exceptions.BreachedPassword;
    import account.exceptions.SamePassword;
    import account.exceptions.UserExistException;
    import account.service.AuthoritiesServiceImpl;
    import account.service.EmployeeServiceImpl;
    import account.service.UserServiceImpl;
    import jakarta.validation.Valid;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    @RestController
    @Validated
    @RequestMapping("/api/auth")
    public class AuthenticationController {

        private EmployeeServiceImpl employeeService;
        private UserServiceImpl userService;
        private AuthoritiesServiceImpl authoritiesService;
        private BreachedPasswords breachedPasswords;

        @Autowired
        public AuthenticationController(EmployeeServiceImpl employeeService, UserServiceImpl userService, AuthoritiesServiceImpl authoritiesService, BreachedPasswords breachedPasswords) {
            this.employeeService = employeeService;
            this.userService = userService;
            this.authoritiesService = authoritiesService;
            this.breachedPasswords = breachedPasswords;
        }


        @PostMapping("/signup")
        public ResponseEntity<?> signUser(@Valid @RequestBody Employee employee) {
            boolean userExists = this.employeeService.doUserExists(employee.getEmail());
            employee.setEmail(employee.getEmail().toLowerCase());

            if (userExists) {
                throw new UserExistException();
            } else {
                this.employeeService.saveNewEmployee(employee);
                return ResponseEntity.ok().body(employee);
            }
        }

        @PostMapping("/changepass")
        public ResponseEntity<?> changePassword(Authentication auth, @Valid @RequestBody PasswordChange newPassword) {
            String username = auth.getName();
            boolean breachedPassword = this.employeeService.breachedPassword(newPassword.getNewPassword());
            boolean samePassword = this.employeeService.samePassword(username, newPassword.getNewPassword());


            if (breachedPassword) {
                throw new BreachedPassword();
            } else if (samePassword){
                throw new SamePassword();
            } else {
                //Consider doing this inside the employee service
                Employee tempEmployee = this.employeeService.changePassword(username, newPassword.getNewPassword());
                SuccessfulPassword successfulPassword = this.userService.changePassword(tempEmployee);
                return ResponseEntity.ok().body(successfulPassword);
            }

        }
    }
  learner_created: true
- name: src/account/repositories/UserRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.User;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;


    @Repository
    public interface UserRepository extends JpaRepository<User, String> {
    }
  learner_created: true
- name: src/account/service/UserServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.dto.SuccessfulPassword;
    import account.repositories.UserRepository;
    import account.entities.Employee;
    import account.entities.User;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.List;

    @Service
    @Transactional
    public class UserServiceImpl implements UserService {

        private UserRepository userRepository;
        private PasswordEncoder encoder;

        @Autowired
        public UserServiceImpl(UserRepository userRepository, PasswordEncoder encoder) {
            this.userRepository = userRepository;
            this.encoder = encoder;
        }

        /* Method to create a new user. It takes an employee email and password, here in this method we set the value of
        *  enabled to '1' and then save the user to the database. */
        @Override
        public void saveNewUser(Employee employee) {
            User tempUser = new User(employee);
            tempUser.setEnabled(1);
            this.userRepository.save(tempUser);
        }

        @Override
        public User findUserByUsername(String username) {
            for (User x : getAllUsers()) {
                if (x.getUsername().equals(username)) {
                    return x;
                }
            }
            return null;
        }

        @Override
        public SuccessfulPassword changePassword(Employee employee) {
            saveNewUser(employee);
            return new SuccessfulPassword(employee.getEmail(), "The password has been updated successfully");
        }

        @Override
        public void updateUser(User user) {
            this.userRepository.save(user);
        }

        @Override
        public void deleteUser(String username) {
            for (User userOnList : getAllUsers()) {
                if (userOnList.getUsername().equalsIgnoreCase(username)) {
                    this.userRepository.delete(userOnList);
                }
            }
        }

        @Override
        public List<User> getAllUsers() {
            return this.userRepository.findAll();
        }
    }
  learner_created: true
- name: src/account/service/UserService.java
  visible: true
  text: |
    package account.service;

    import account.dto.SuccessfulPassword;
    import account.entities.Employee;
    import account.entities.User;

    import java.util.List;

    public interface UserService {
        void saveNewUser(Employee employee);
        User findUserByUsername(String username);
        void updateUser(User user);
        SuccessfulPassword changePassword(Employee employee);
        void deleteUser(String username);
        List<User> getAllUsers();

    }
  learner_created: true
- name: src/account/controllers/BusinessLogicController.java
  visible: true
  text: |
    package account.controllers;

    import account.dto.StatusSuccessful;
    import account.dto.UploadPayroll;
    import account.entities.Employee;
    import account.entities.EmployeePayroll;
    import account.exceptions.BadRequest;
    import account.service.AuthoritiesServiceImpl;
    import account.service.EmployeeServiceImpl;
    import account.service.UserServiceImpl;
    import jakarta.validation.Valid;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import java.util.ArrayList;
    import java.util.List;

    @RestController
    @Validated
    public class BusinessLogicController {

        private EmployeeServiceImpl employeeService;
        private UserServiceImpl userService;
        private AuthoritiesServiceImpl authoritiesService;

        @Autowired
        public BusinessLogicController(EmployeeServiceImpl employeeService, UserServiceImpl userService, AuthoritiesServiceImpl authoritiesService) {
            this.employeeService = employeeService;
            this.userService = userService;
            this.authoritiesService = authoritiesService;
        }

        @PostMapping("/api/acct/payments")
        public ResponseEntity<?> uploadPayrolls(@RequestBody @Valid List<UploadPayroll> uploadPayroll) {
            List<UploadPayroll> testEmployeePayment = new ArrayList<>(uploadPayroll);
            Employee tempEmployee = this.employeeService.getEmployeeByEmail(testEmployeePayment.get(0).getEmail());

            if (tempEmployee == null) {
                throw new BadRequest();
            } else {
                this.employeeService.setEmployeePayment(tempEmployee, testEmployeePayment);
                return ResponseEntity.ok().body(new StatusSuccessful("Added successfully!"));
            }

        }

        @PutMapping("/api/acct/payments")
        public ResponseEntity<?> changeSalary(@RequestBody @Valid List<UploadPayroll> uploadPayroll) {
            List<UploadPayroll> testEmployeePayment = new ArrayList<>(uploadPayroll);
            Employee tempEmployee = this.employeeService.getEmployeeByEmail(testEmployeePayment.get(0).getEmail());

            if (tempEmployee == null) {
                throw new BadRequest();
            } else {
                this.employeeService.updatePayrolls(tempEmployee, testEmployeePayment);
                return ResponseEntity.ok().body(new StatusSuccessful("Updated successfully!"));
            }
        }

        /* Method that takes return an Employee payroll, it returns an entire Employee payroll if no period is on the input
           that is if the period is == null.

           If a period is on the parameter then it's going to return the employee payroll from that specific period. */
        @GetMapping("/api/empl/payment")
        public ResponseEntity<?> getEmployeePayroll(Authentication auth, @RequestParam(required = false) String period) {
            String user = auth.getName().toLowerCase();
            Employee testEmployee = this.employeeService.getEmployeeByEmail(user);

            if (testEmployee == null) {
                return ResponseEntity.badRequest().body("User doesnt exist");
            }

            if (period == null) {
                return ResponseEntity.ok().body(testEmployee.getEmployeePaymentList());
            } else {
                EmployeePayroll singleEmployeePayroll = this.employeeService.getSinglePayroll(testEmployee, period);
                return ResponseEntity.ok().body(singleEmployeePayroll);
            }
        }


    }
  learner_created: true
- name: src/account/entities/User.java
  visible: true
  text: |
    package account.entities;

    import jakarta.persistence.Column;
    import jakarta.persistence.Entity;
    import jakarta.persistence.Id;
    import jakarta.persistence.Table;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.Collections;

    @Entity
    @Table(name = "users")
    public class User implements UserDetails {

        @Id
        @Column(name = "username", columnDefinition = "VARCHAR_IGNORECASE")
        private String username;

        @Column(name = "password")
        private String password;

        @Column(name = "enabled")
        private int enabled;

        public User() {
        }

        public User(Employee employee) {
            this.username = employee.getEmail();
            this.password = employee.getPassword();
        }

        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return Collections.emptyList();
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public int getEnabled() {
            return enabled;
        }

        public void setEnabled(int enabled) {
            this.enabled = enabled;
        }

    }
  learner_created: true
- name: src/account/service/EmployeeServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.BreachedPasswords;
    import account.dto.AssignUserRole;
    import account.dto.UploadPayroll;
    import account.entities.EmployeePayroll;
    import account.exceptions.BadRequest;
    import account.exceptions.BreachedPassword;
    import account.exceptions.CannotCombineRoles;
    import account.exceptions.CannotRemoveAdministrator;
    import account.repositories.EmployeeRepository;
    import account.entities.Employee;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    @Service
    @Transactional
    public class EmployeeServiceImpl implements EmployeeService {

        private EmployeeRepository employeeRepository;
        private AuthoritiesServiceImpl authoritiesService;
        private UserServiceImpl userService;
        private PasswordEncoder encoder;
        private BreachedPasswords breachedPasswords;
        private EmployeePayrollServiceImpl employeePayrollService;

        public EmployeeServiceImpl(EmployeeRepository employeeRepository,
                                   AuthoritiesServiceImpl authoritiesService,
                                   UserServiceImpl userService,
                                   PasswordEncoder encoder,
                                   BreachedPasswords breachedPasswords,
                                   EmployeePayrollServiceImpl employeePayrollService)
        {
            this.employeeRepository = employeeRepository;
            this.authoritiesService = authoritiesService;
            this.userService = userService;
            this.encoder = encoder;
            this.breachedPasswords = breachedPasswords;
            this.employeePayrollService = employeePayrollService;
        }

        /* This method adds a new Employee to the database, before storing the employee it checks if the password is
         *  breached, and then encode the password using Bcrypt with a strength of 13 */
        @Override
        public void saveNewEmployee(Employee employee) {
            this.authoritiesService.save(employee);

            //Assigning a bcrypt password to the employee
            breachedPassword(employee.getPassword());
            employee.setPassword(encoder.encode(employee.getPassword()));

            this.userService.saveNewUser(employee);

            //Persisting the employee to the 'Employees' table
            this.employeeRepository.save(employee);
        }

        @Override
        public void updateEmployee(Employee employee) {
            this.employeeRepository.save(employee);
        }

        @Override
        public Employee getEmployeeByEmail(String email) {
            for (Employee x : getAllEmployees()) {
                if (x.getEmail().equalsIgnoreCase(email)) {
                    return x;
                }
            }
            return null;
        }

        /* Method that receives an employee and a list of UploadPayroll objects to convert it to EmployeePayroll objects
         * which are used to save this info on the database and adds the values to the current employee in their List<EmployeePayroll> list.
         *  Then it proceeds to update the employee with this new info to persist it on the database.
         *
         * If the employee is different from the original that was passed on the method then it changes employee based
         * on their values, a user must be registered on the database, otherwise an exception will be thrown
         *
         * An employee payroll period should be unique, this means that it cannot be paid twice or more on the same period. */
        @Override
        @Transactional
        public void setEmployeePayment(Employee employee, List<UploadPayroll> uploadPayrollList) {
    //        List<EmployeePayroll> employeePayrollList = new ArrayList<>();

            //Convert the data from UploadPayroll Object to EmployeePayroll
            for (UploadPayroll x : uploadPayrollList) {
                Employee tempEmployee = getEmployeeByEmail(x.getEmail());

                if (tempEmployee == null) {
                    throw new BadRequest();
                } else if (!tempEmployee.equals(employee)) {
                    employee = tempEmployee;
                }

                EmployeePayroll employeePayrollInfo = new EmployeePayroll(tempEmployee);
                employeePayrollInfo.setPeriod(x.getPeriod());
                employeePayrollInfo.setSalary(x.getSalary());

                //This is to check if there's repeated periods
                for (EmployeePayroll payroll : tempEmployee.getEmployeePaymentList()) {
                    if (payroll.getPeriod().equalsIgnoreCase(employeePayrollInfo.getPeriod())) {
                        throw new BadRequest();
                    }
                }

                //Saving the employeePayrollInfo to the table on the database and adding the payroll to the respective employee
                this.employeePayrollService.save(employeePayrollInfo);
                tempEmployee.addEmployeePayroll(employeePayrollInfo);
                updateEmployee(tempEmployee);
            }
        }

        /* */

        @Override
        @Transactional
        public void updatePayrolls(Employee employee, List<UploadPayroll> uploadPayrollList) {
            List<EmployeePayroll> employeePayrollList = new ArrayList<>();

            //Convert the data from UploadPayroll Object to EmployeePayroll
            for (UploadPayroll x : uploadPayrollList) {
                if (employee.getEmail().equalsIgnoreCase(x.getEmail())) {
                    EmployeePayroll employeePayrollInfo = new EmployeePayroll(employee);
                    employeePayrollInfo.setPeriod(x.getPeriod());
                    employeePayrollInfo.setSalary(x.getSalary());
                    employeePayrollList.add(employeePayrollInfo);
                }
            }
            updateOldPayrollWithNewPayroll(employee, employeePayrollList);
            updateEmployee(employee);
        }

        public void updateOldPayrollWithNewPayroll(Employee employee, List<EmployeePayroll> employeePayrollList) {
            for (EmployeePayroll newPayrollInfo : employeePayrollList) {
                for (EmployeePayroll oldPayrollInfo : employee.getEmployeePaymentList()) {
                    if (newPayrollInfo.getPeriod().equals(oldPayrollInfo.getPeriod())) {
                        oldPayrollInfo.setSalary(newPayrollInfo.getSalary());
                    }
                }
            }
        }

        @Override
        public boolean doUserExists(String email) {
            for (Employee x : getAllEmployees()) {
                if (x.getEmail().equalsIgnoreCase(email)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public EmployeePayroll getSinglePayroll(Employee employee, String period) {
            period = formatMonthNumberToMonthName(period);

            for (EmployeePayroll x : employee.getEmployeePaymentList()) {
                if (x.getPeriod().equals(period)) {
                    return x;
                }
            }
            throw new BadRequest();
        }

        /* Formatting the period from "numberOfMonth-yyyy" to "nameOfMonth-yyyy" and checking if it matches the regex
         *  if it doesn't a new BadRequest exception is going to be thrown */
        public String formatMonthNumberToMonthName(String period) {
            Pattern pattern = Pattern.compile("([0][1-9]|[1][0-2])(-{1})(\\d{1,})");
            Matcher patternPeriodMatcher = pattern.matcher(period);
            if (!patternPeriodMatcher.matches()) {
                throw new BadRequest();
            }
            period = this.employeePayrollService.dateYearMonthFormatter(period);
            return period;
        }

    //    @Override
    //    @Transactional
    //    public void updateEmployeeRole(Employee employee, String role) {
    ////        this.authoritiesService.assignCustomRole(employee, role);
    //            updateEmployee(this.authoritiesService.updateAuthorities(employee, role));
    //
    //    }

    //    @Override
    //    @Transactional
    //    public void updateEmployeeRole(AssignUserRole assignUserRole) {
    //
    //
    ////        this.authoritiesService.removeOrGrant(operation);
    ////        this.authoritiesService.assignCustomRole(employee, role);
    ////        updateEmployee(this.authoritiesService.grantAuthority(employee, role));
    //
    //    }



        @Override
        public boolean samePassword(String email, String newPassword) {
            for (Employee x : getAllEmployees()) {
                if (x.getEmail().equals(email)) {
                    return encoder.matches(newPassword, x.getPassword());
                }
            }
            return false;
        }

        @Override
        public boolean breachedPassword(String newPassword) {
            for (String x : this.breachedPasswords.listOfBreachedPasswords()) {
                if (x.equals(newPassword)) {
                    throw new BreachedPassword();
                }
            }
            return false;
        }

        @Override
        public Employee changePassword(String username, String newPassword) {
            Employee tempEmployee = getEmployeeByEmail(username);
            tempEmployee.setPassword(this.encoder.encode(newPassword));
            updateEmployee(tempEmployee);

            return tempEmployee;
        }

        //Probably need to return employee here
        @Transactional
        @Override
        public void removeOrGrant(AssignUserRole assignUserRole) {
            Employee employee = getEmployeeByEmail(assignUserRole.getUsername());
            String role = assignUserRole.getRole();
            String operation = assignUserRole.getOperation();

            if (this.authoritiesService.isUserAdmin(employee)) {
                //throw exception user is admin, cannot have roles
                throw new CannotCombineRoles();
            }

            switch (operation.toUpperCase()) {
                case "GRANT" -> {
                    updateEmployee(this.authoritiesService.grantAuthority(employee, role));
                }
                case "REMOVE" -> {
                    updateEmployee(this.authoritiesService.deleteUserRole(employee, role));
                }
                default -> {
                    //throw exception here
                    throw new BadRequest();
                }
            }
        }

        @Override
        @Transactional
        public void deleteEmployee(Employee employee) {
            String username = employee.getEmail();

            this.authoritiesService.deleteAllRoles(username);
            this.userService.deleteUser(username);
            this.employeeRepository.delete(employee);
        }


        @Override
        public List<Employee> getAllEmployees() {
            return this.employeeRepository.findAll();
        }


    }
  learner_created: true
- name: src/account/exceptions/UserNotFound.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "User not found!")
    public class UserNotFound extends RuntimeException {
        public UserNotFound() {
        }

        public UserNotFound(String message) {
            super(message);
        }

        public UserNotFound(String message, Throwable cause) {
            super(message, cause);
        }

        public UserNotFound(Throwable cause) {
            super(cause);
        }

        public UserNotFound(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/exceptions/AccessDenied.java
  visible: true
  learner_created: true
- name: src/account/exceptions/CustomAuthenticationFailureHandler.java
  visible: true
  learner_created: true
- name: src/account/exceptions/CustomAccessDeniedHandler.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/217/stages/1090/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 25 Jun 2023 21:38:42 UTC"
record: -1
