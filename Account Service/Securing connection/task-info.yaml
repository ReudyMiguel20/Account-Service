type: edu
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |
    import account.AccountServiceApplication;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import javax.net.ssl.*;
    import java.security.cert.X509Certificate;

    public class AccountServiceTest extends SpringTest {
      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      SSLSocket socket;
      java.security.cert.X509Certificate[] chain;

      // Warning!!! Only for testing reason, trust all certificates!
      TrustManager[] trustAllCerts = new TrustManager[] {
              new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                  return new java.security.cert.X509Certificate[0];
                }
                public void checkClientTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
              }
      };

      // Test SSL
      public CheckResult checkCertificateName(String nameCN) {
        try {
          SSLContext sc = SSLContext.getInstance("SSL");
          //ТАК нельзя!!! доверяем всем сертификатам, только для тестирования и разработки!!!
          sc.init(null, trustAllCerts, new java.security.SecureRandom());
          SSLSocketFactory factory = sc.getSocketFactory();
          HttpRequest request = get("");
          socket = (SSLSocket) factory.createSocket(request.getHost(), request.getPort());
          getCertificates();
          if (findCert(nameCN)) {
            return CheckResult.correct();
          } else {
            throw new WrongAnswer("Not found certificate with CN - " + nameCN);
          }
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println("Connection not found");
          throw new WrongAnswer("Can't establish https connection!");
        }
      }

      // Get certificate chain
      public void getCertificates() {
        try {
          chain = (X509Certificate[]) socket.getSession().getPeerCertificates();
        } catch (SSLPeerUnverifiedException e) {
          e.printStackTrace();
          System.out.println(e.toString());
        }
      }


      // Searching certificate by Common Name
      public boolean findCert(String subject) {
        for (java.security.cert.X509Certificate c : chain) {
          String subjectName = c.getSubjectDN().getName();
          System.out.println(subjectName + " " + c.getSigAlgName());
          if (subjectName.contains("CN=" + subject)) {
            return true;
          }
        }
        return false;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[]{

              // Check certificate name
              () -> checkCertificateName("accountant_service"),
      };
    }
  learner_created: false
- name: src/account/repositories/EmployeePayrollRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.EmployeePayroll;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface EmployeePayrollRepository extends JpaRepository<EmployeePayroll, Long> {
    }
  learner_created: true
- name: src/account/service/EmployeePayrollServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.dto.UploadPayroll;
    import account.entities.Employee;
    import account.entities.EmployeePayroll;
    import account.exceptions.BadRequest;
    import account.repositories.EmployeePayrollRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;
    import java.util.ArrayList;
    import java.util.List;

    @Service
    public class EmployeePayrollServiceImpl implements EmployeePayrollService {

        private EmployeePayrollRepository employeePayrollRepository;

        @Autowired
        public EmployeePayrollServiceImpl(EmployeePayrollRepository employeePayrollRepository) {
            this.employeePayrollRepository = employeePayrollRepository;
        }


        @Override
        public void save(EmployeePayroll employeePayroll) {
            this.employeePayrollRepository.save(employeePayroll);
        }

        @Override
        public String dateYearMonthFormatter(String period) {
            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("MM-yyyy");
            YearMonth yearMonth = YearMonth.parse(period, inputFormatter);

            DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("MMMM-yyyy");

            period = yearMonth.format(outputFormatter);
            return period;
        }
    }
  learner_created: true
- name: src/account/controllers/ServiceController.java
  visible: true
  text: |
    package account.controllers;

    import account.dto.AssignUserAccess;
    import account.dto.AssignUserRole;
    import account.dto.MessageStatus;
    import account.dto.StatusSuccessful;
    import account.entities.Employee;
    import account.entities.LogEntry;
    import account.exceptions.CannotLockTheAdmin;
    import account.exceptions.UserNotFound;
    import account.service.AuthoritiesServiceImpl;
    import account.service.EmployeeServiceImpl;
    import account.service.LogServiceImpl;
    import org.apache.logging.log4j.message.StringFormattedMessage;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.web.bind.annotation.*;


    @RestController
    @RequestMapping("/api/admin")
    public class ServiceController {

        private EmployeeServiceImpl employeeService;
        private AuthoritiesServiceImpl authoritiesService;
        private LogServiceImpl logService;

        @Autowired
        public ServiceController(EmployeeServiceImpl employeeService,
                                 AuthoritiesServiceImpl authoritiesService,
                                 LogServiceImpl logService) {
            this.employeeService = employeeService;
            this.authoritiesService = authoritiesService;
            this.logService = logService;
        }

        @PutMapping("/user/role")
        public ResponseEntity<?> setUserRole(Authentication auth, @RequestBody AssignUserRole assignUserRole) {
            Employee tempEmployee = this.employeeService.getEmployeeByEmail(assignUserRole.getUsername());
            String username = assignUserRole.getUsername().toLowerCase();
            String role = assignUserRole.getRole();

            if (tempEmployee == null) {
                throw new UserNotFound();
            } else {
                String action = this.employeeService.removeOrGrant(assignUserRole);
                String actionPerformed = "";

                if (action.equalsIgnoreCase("GRANT_ROLE")) {
                    actionPerformed = String.valueOf(new StringFormattedMessage("Grant role %s to %s", role, username));
                } else {
                    actionPerformed = String.valueOf(new StringFormattedMessage("Remove role %s from %s", role, username));
                }


                this.logService.save(new LogEntry(auth.getName(), action, actionPerformed, "/api/admin/user/role"));
                return ResponseEntity.ok().body(tempEmployee);
            }
        }


        @DeleteMapping("/user/{username}")
        public ResponseEntity<?> deleteUser(Authentication auth, @PathVariable String username) {
            System.out.println(auth.getAuthorities());
            Employee tempEmployee = this.employeeService.getEmployeeByEmail(username);

            if (tempEmployee == null) {
                //throw exception
                throw new UserNotFound();
            } else {
                this.employeeService.deleteEmployee(tempEmployee);
                MessageStatus messageStatus = new MessageStatus(username, "Deleted successfully!");
                this.logService.save(new LogEntry(auth.getName(), "DELETE_USER", tempEmployee.getEmail(), "/api/admin/user"));
                return ResponseEntity.ok().body(messageStatus);
            }
        }


        @GetMapping("/user/")
        public ResponseEntity<?> getAllUsers() {
            if (this.authoritiesService.howManyUsersWithAuthorities() == 0) {
                return ResponseEntity.badRequest().build();
            } else {
                return ResponseEntity.ok().body(this.employeeService.getAllEmployees());
            }
        }

        @PutMapping("user/access")
        public ResponseEntity<?> controlUserAccess(Authentication auth, @RequestBody AssignUserAccess assignUserAccess) {
            Employee tempEmployee = this.employeeService.getEmployeeByEmail(assignUserAccess.getEmployeeUsername());
            String employeePerformedTheAction = auth.getName();
            String employeeToPerformTheAction = assignUserAccess.getEmployeeUsername().toLowerCase();

            if (tempEmployee == null) {
                throw new UserNotFound();
            } else if (this.authoritiesService.isUserAdmin(tempEmployee)) {
                throw new CannotLockTheAdmin();
            } else {
                String action = this.employeeService.lockOrUnlockUser(assignUserAccess);
                String lockOrUnlocked = "";
                String logStatus = "";

                if (action.equalsIgnoreCase("LOCK_USER")) {
                    lockOrUnlocked = "locked!";
                    logStatus = "Lock user ";
                } else {
                    lockOrUnlocked = "unlocked!";
                    logStatus = "Unlock user ";
                }

                String status = String.valueOf(new StringFormattedMessage("User %s %s", employeeToPerformTheAction, lockOrUnlocked));

                this.logService.save(new LogEntry(employeePerformedTheAction, action, logStatus + employeeToPerformTheAction, "/api/admin/user/access"));
                return ResponseEntity.ok().body(new StatusSuccessful(status));
            }
        }

    }
  learner_created: true
- name: src/account/service/AuthoritiesServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.entities.Authorities;
    import account.entities.Employee;
    import account.exceptions.*;
    import account.repositories.AuthoritiesRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;
    import org.springframework.web.bind.annotation.ResponseStatus;

    import javax.management.relation.Role;
    import java.util.List;

    @Service
    @Transactional
    public class AuthoritiesServiceImpl implements AuthoritiesService {

        private AuthoritiesRepository authoritiesRepository;

        @Autowired
        public AuthoritiesServiceImpl(AuthoritiesRepository authoritiesRepository) {
            this.authoritiesRepository = authoritiesRepository;
        }

        /* Pretty self-explanatory method of creating a new Authority, if there's no user in the database then the first
           user will always be an admin, the rest will be normal users. */
        @Override
        public void save(Employee employee) {
            Authorities tempAuthority = assignRoleNewUser(employee);
            this.authoritiesRepository.save(tempAuthority);
        }

        @Override
        public void saveNewAuthority(Authorities tempAuthority) {
            this.authoritiesRepository.save(tempAuthority);
        }


        @Override
        public Employee grantAuthority(Employee employee, String role) {
            if (isUserAdmin(employee)) {
                //throw new exception for an admin cannot have additional roles
                throw new CannotCombineRoles();
            } else if (!checkForDuplicateRoles(employee, role)) {
                return assignCustomRole(employee, role);
            } else {
                throw new UserNotFound();
    //            return null;
            }
        }

        @Override
        public void deleteAuthority(Authorities authority) {
            for (Authorities userAuthority : getAllAuthorities()) {
                if (userAuthority.getRole().equalsIgnoreCase(authority.getRole()) && userAuthority.getUsername().equalsIgnoreCase(authority.getUsername())) {
                    this.authoritiesRepository.delete(userAuthority);
                }
            }
        }

        @Override
        public boolean checkForDuplicateRoles(Employee employee, String role) {
            for (String employeeRoles : employee.getRole()) {
                if (employeeRoles.equalsIgnoreCase("ROLE_" + role)) {
                    //Throw an exception here
                    throw new BadRequest();
                }
            }
            return false;
        }

        @Override
        public Employee deleteUserRole(Employee employee, String role) {
            Authorities tempAuthority = new Authorities(employee, role);

            for (String employeeRoles : employee.getRole()) {
                if (employeeRoles.equalsIgnoreCase("ROLE_" + role)) {

                    if (employeeRoles.equalsIgnoreCase("ROLE_ADMINISTRATOR")) {
                        throw new CannotRemoveAdministrator();
                    } else if (employee.getRole().size() == 1) {
                        throw new UserMustHaveOneRole();
                    }

                    employee.removeRole("ROLE_" + role);
                    deleteAuthority(tempAuthority);
                    return employee;
                }
            }

            throw new UserRoleDoesntExist();
        }

        @Override
        public Authorities assignRoleNewUser(Employee employee) {
            Authorities tempAuthority = new Authorities(employee);
            tempAuthority.setUsername(employee.getEmail());

            if (!isThereOnlyOneUser()) {
                tempAuthority.setRole("USER");
                employee.setRole("USER");
            } else {
                tempAuthority.setRole("ADMINISTRATOR");
                employee.setRole("ADMINISTRATOR");
            }

            return tempAuthority;
        }

        @Override
        public Employee assignCustomRole(Employee employee, String role) {
            if (!role.equalsIgnoreCase("ACCOUNTANT") && !role.equalsIgnoreCase("USER") && !role.equalsIgnoreCase("AUDITOR")) {
                throw new RoleNotFound();
            }

            Authorities tempAuthority = new Authorities(employee, role);
            saveNewAuthority(tempAuthority);

            employee.setRole(role);
            return employee;
        }

        @Override
        public boolean isThereOnlyOneUser() {
            return howManyUsersWithAuthorities() == 0;
        }

        @Override
        public void deleteAllRoles(String username) {
            for (Authorities x : getAllAuthorities()) {
                if (x.getUsername().equalsIgnoreCase(username)) {
                    if (x.getRole().equalsIgnoreCase("ROLE_ADMINISTRATOR")) {
                        //throw cannot delete admin
                        throw new CannotRemoveAdministrator();
                    }
                    deleteAuthority(x);
                }
            }
        }

        @Override
        public boolean isUserAdmin(Employee employee) {
            for (String role : employee.getRole()) {
                if (role.equalsIgnoreCase("ROLE_ADMINISTRATOR")) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public int howManyUsersWithAuthorities() {
            return this.authoritiesRepository.findAll().size();
        }

        @Override
        public List<Authorities> getAllAuthorities() {
            return this.authoritiesRepository.findAll();
        }
    }
  learner_created: true
- name: src/account/service/AuthoritiesService.java
  visible: true
  text: |
    package account.service;

    import account.entities.Authorities;
    import account.entities.Employee;

    import java.util.List;

    public interface AuthoritiesService {
        void save(Employee employee);

        void saveNewAuthority(Authorities tempAuthority);

        Employee grantAuthority(Employee employee, String role);

        boolean checkForDuplicateRoles(Employee employee, String role);

        Employee deleteUserRole(Employee employee, String role);

        Authorities assignRoleNewUser(Employee employee);

        Employee assignCustomRole(Employee employee, String role);

    //    void updateAuthorities(Employee employee, String role);

    //    void deleteAuthority(String user);

        void deleteAuthority(Authorities authority);


    //    Authorities assignCustomRole(Employee employee, String authority);

        boolean isThereOnlyOneUser();

        void deleteAllRoles(String username);

        boolean isUserAdmin(Employee employee);

        int howManyUsersWithAuthorities();

        List<Authorities> getAllAuthorities();
    }
  learner_created: true
- name: src/account/service/EmployeeService.java
  visible: true
  text: |
    package account.service;

    import account.dto.AssignUserAccess;
    import account.dto.AssignUserRole;
    import account.dto.UploadPayroll;
    import account.entities.Employee;
    import account.entities.EmployeePayroll;
    import org.springframework.transaction.annotation.Transactional;
    //import account.entities.EmployeePayment;

    import java.util.List;

    public interface EmployeeService {
        void saveNewEmployee(Employee employee);
        void updateEmployee(Employee employee);
        Employee getEmployeeByEmail(String email);
        void setEmployeePayment(Employee employee, List<UploadPayroll> uploadPayrollList);
        void updatePayrolls(Employee employee, List<UploadPayroll> uploadPayrollList);
        boolean doUserExists(String email);
        EmployeePayroll getSinglePayroll(Employee employee, String period);

    //    void updateEmployeeRole(AssignUserRole assignUserRole);
    //    void updateEmployeeRole(AssignUserRole assignUserRole);

        boolean samePassword(String username, String newPassword);
        boolean breachedPassword(String newPassword);
        Employee changePassword(String username, String newPassword);

        //Probably need to return employee here
        @Transactional
        String removeOrGrant(AssignUserRole assignUserRole);

        void deleteEmployee(Employee employee);

        void failedLogin(Employee employee);

        void disableEmployee(Employee employee);

    //    void enableEmployee(Employee employee);

        void maxOutLoginAttempts(Employee employee);

        void resetLoginAttempts(Employee employee);

        String lockOrUnlockUser(AssignUserAccess assignUserAccess);

        //    boolean checkForDuplicateRoles(Employee employee, String role);
        List<Employee> getAllEmployees();
    }
  learner_created: true
- name: src/account/dto/StatusSuccessful.java
  visible: true
  text: |
    package account.dto;

    public class StatusSuccessful {
        private String status;

        public StatusSuccessful() {
        }

        public StatusSuccessful(String status) {
            this.status = status;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }
    }
  learner_created: true
- name: src/account/AuthenticationFailureEvent.java
  visible: true
  text: |+
    package account;

    import account.entities.Employee;
    import account.entities.LogEntry;
    import account.exceptions.ControllerExceptionHandler;
    import account.exceptions.UserIsLocked;
    import account.service.AuthoritiesServiceImpl;
    import account.service.EmployeeServiceImpl;
    import account.service.LogServiceImpl;
    import account.service.UserServiceImpl;
    import jakarta.servlet.http.HttpServletRequest;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.context.event.EventListener;
    import org.springframework.security.authentication.event.AbstractAuthenticationFailureEvent;
    import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
    import org.springframework.stereotype.Component;

    @Component
    public class AuthenticationFailureEvent implements ApplicationListener<AbstractAuthenticationFailureEvent> {

        private HttpServletRequest request;
        //    private HttpServletResponse response;
        private LogServiceImpl logService;
        private EmployeeServiceImpl employeeService;
        private UserServiceImpl userService;
        private AuthoritiesServiceImpl authoritiesService;


        public AuthenticationFailureEvent() {
        }

        @Autowired
        public AuthenticationFailureEvent(HttpServletRequest request,
    //                                      HttpServletResponse response,
    //                                AuthenticationException exception,
                                          LogServiceImpl logService,
                                          EmployeeServiceImpl employeeService,
                                          UserServiceImpl userService,
                                          AuthoritiesServiceImpl authoritiesService
        ) {
            this.request = request;
    //        this.response = response;
    //        this.exception = exception;
            this.logService = logService;
            this.employeeService = employeeService;
            this.userService = userService;
            this.authoritiesService = authoritiesService;
        }

        @EventListener
        public void onSuccess(AuthenticationSuccessEvent success) {
            String personAuth = success.getAuthentication().getName();
            String endpoint = request.getRequestURI();

            Employee tempEmployee = this.employeeService.getEmployeeByEmail(personAuth);

            if (tempEmployee == null) {

            } else {
                this.employeeService.resetLoginAttempts(tempEmployee);
            }
        }

    //    @EventListener
    //    public void onFailure(AbstractAuthenticationEvent failures) {
    //        String personAuth = failures.getAuthentication().getName();
    //        String endpoint = request.getRequestURI();
    //
    //        Employee tempEmployee = this.employeeService.getEmployeeByEmail(personAuth);
    //
    //        if (tempEmployee == null) {
    //            //dont do anything
    //        } else if (!this.authoritiesService.isUserAdmin(tempEmployee) && failures.getAuthentication().isAuthenticated() && ) {
    //            this.logService.save(new LogEntry(personAuth, "ACCESS_DENIED", endpoint, endpoint));
    //        } else if (this.authoritiesService.isUserAdmin(tempEmployee) && !failures.getAuthentication().isAuthenticated()) {
    //            this.logService.save(new LogEntry(personAuth, "LOGIN_FAILED", endpoint, endpoint));
    //        } else {
    //            if (tempEmployee.getFailedLogins() >= 5) {
    //                // dont do anything, may aswell remove this
    //            } else if (tempEmployee.getFailedLogins() == 4) {
    //                this.logService.save(new LogEntry(personAuth, "BRUTE_FORCE", endpoint, endpoint));
    //                this.logService.save(new LogEntry(personAuth, "LOCK_USER", "Lock employee " + personAuth, endpoint));
    //                tempEmployee.setFailedLogins(tempEmployee.getFailedLogins() + 1);
    //
    //                this.employeeService.updateEmployee(tempEmployee);
    //                this.employeeService.disableEmployee(tempEmployee);
    //            } else {
    //                this.logService.save(new LogEntry(personAuth, "LOGIN_FAILED", endpoint, endpoint));
    //                this.employeeService.failedLogin(tempEmployee);
    //            }
    //        }
    //    }

        @Override
        public void onApplicationEvent(AbstractAuthenticationFailureEvent event) {
            String personAuth = event.getAuthentication().getName();
            String endpoint = request.getRequestURI();

            Employee tempEmployee = this.employeeService.getEmployeeByEmail(personAuth);

            if (tempEmployee == null && personAuth == null) {
                this.logService.save(new LogEntry("Anonymous", "LOGIN_FAILED", endpoint, endpoint));
            } else if (personAuth != null && tempEmployee == null) {
                this.logService.save(new LogEntry(personAuth, "LOGIN_FAILED", endpoint, endpoint));
            } else if (!this.authoritiesService.isUserAdmin(tempEmployee) && event.getAuthentication().isAuthenticated()) {
                this.logService.save(new LogEntry(personAuth, "ACCESS_DENIED", endpoint, endpoint));
            } else if (this.authoritiesService.isUserAdmin(tempEmployee) && !event.getAuthentication().isAuthenticated()) {
                this.logService.save(new LogEntry(personAuth, "LOGIN_FAILED", endpoint, endpoint));
            } else {
                if (tempEmployee.getFailedLogins() >= 7) {
                    throw new UserIsLocked("User account is locked");
                } else if (tempEmployee.getFailedLogins() > 3) {
                    this.logService.save(new LogEntry(personAuth, "LOGIN_FAILED", endpoint, endpoint));
                    this.logService.save(new LogEntry(personAuth, "BRUTE_FORCE", endpoint, endpoint));
                    this.logService.save(new LogEntry(personAuth, "LOCK_USER", "Lock user " + personAuth, "/api/admin/user/access"));
                    tempEmployee.setFailedLogins(tempEmployee.getFailedLogins() + 9);

                    this.employeeService.updateEmployee(tempEmployee);
                    this.employeeService.disableEmployee(tempEmployee);
                } else {
                    this.logService.save(new LogEntry(personAuth, "LOGIN_FAILED", endpoint, endpoint));
                    this.employeeService.failedLogin(tempEmployee);
                }
            }
        }
    //        System.out.println(event.getException().toString());
    //        System.out.println(event.getException().getMessage());
    //        System.out.println();
    //        System.out.println(event.getAuthentication().getCredentials().toString());


    }

    //    @EventListener
    //    @Override
    //    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {

    //
    //        System.out.println(request.getUserPrincipal());
    //    }

    //    public void logEvent(String username, String action, String object, String path) {
    //        LogEntry logEntry = new LogEntry(username, action, object, path);
    //
    //        this.logEntries.add(logEntry);
    //    }

    //    public String defineAction(String path) {
    //        String finald = "";
    //        switch (path) {
    //            case "/api/auth/changepass" -> finald = "CHANGE_PASSWORD";
    //        }
    //        return finald;
    //    }

    //    public List<LogEntry> getLogEntries() {
    //        return logEntries;
    //    }

    //
    //    @Override
    //    public String toString() {
    //        return "AuthenticationEvents{" +
    //                "logEntries=" + logEntries +
    //                '}';
    //    }


  learner_created: true
- name: src/account/exceptions/CannotLockTheAdmin.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Can't lock the ADMINISTRATOR!")
    public class CannotLockTheAdmin extends RuntimeException {

        public CannotLockTheAdmin() {
        }

        public CannotLockTheAdmin(String message) {
            super(message);
        }

        public CannotLockTheAdmin(String message, Throwable cause) {
            super(message, cause);
        }

        public CannotLockTheAdmin(Throwable cause) {
            super(cause);
        }

        public CannotLockTheAdmin(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/exceptions/CustomErrorMessage.java
  visible: true
  text: |
    package account.exceptions;

    import java.time.LocalDateTime;

    public class CustomErrorMessage {
        private LocalDateTime timestamp;
        private int status;
        private String error;
        private String message;
        private String path;

        public CustomErrorMessage(LocalDateTime timestamp, int status, String error, String message, String path) {
            this.timestamp = timestamp;
            this.status = status;
            this.error = error;
            this.message = message;
            this.path = path;
        }

        public LocalDateTime getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(LocalDateTime timestamp) {
            this.timestamp = timestamp;
        }

        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }
    }
  learner_created: true
- name: src/account/exceptions/UserRoleDoesntExist.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The user does not have a role!")
    public class UserRoleDoesntExist extends RuntimeException {

        public UserRoleDoesntExist() {
        }

        public UserRoleDoesntExist(String message) {
            super(message);
        }

        public UserRoleDoesntExist(String message, Throwable cause) {
            super(message, cause);
        }

        public UserRoleDoesntExist(Throwable cause) {
            super(cause);
        }

        public UserRoleDoesntExist(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/service/LogServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.entities.LogEntry;
    import account.repositories.LogRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.List;

    @Service
    public class LogServiceImpl implements LogService {

        private LogRepository logRepository;

        @Autowired
        public LogServiceImpl(LogRepository logRepository) {
            this.logRepository = logRepository;
        }


        @Override
        public void save(LogEntry log) {
            this.logRepository.save(log);
        }

        @Override
        public List<LogEntry> getLogs() {
            return this.logRepository.findAll();
        }
    }
  learner_created: true
- name: src/account/entities/Employee.java
  visible: true
  text: |
    package account.entities;

    //import account.entities.EmployeePayment;
    //import account.dto.EmployeePayroll;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;
    import jakarta.persistence.*;
    import jakarta.validation.constraints.Email;
    import jakarta.validation.constraints.NotEmpty;
    import jakarta.validation.constraints.NotNull;
    import jakarta.validation.constraints.Size;

    import java.text.ParseException;
    import java.text.SimpleDateFormat;
    import java.util.*;
    import java.util.stream.Collectors;

    @JsonPropertyOrder({"id", "name", "lastname", "email", "roles"})
    @Entity
    @Table(name = "Employees")
    public class Employee {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id")
        private long id;

        @NotEmpty
        @JsonProperty(value = "name")
        @Column(name = "name")
        private String name;

        @NotEmpty
        @JsonProperty(value = "lastname")
        @Column(name = "last_name")
        private String lastName;

        @NotEmpty
        @JsonProperty(value = "email")
        @Email(regexp = "\\w+(@acme.com)$")
        @Column(name = "email", columnDefinition = "VARCHAR_IGNORECASE")
        private String email;

        @NotEmpty
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @Column(name = "password")
        @Size(min = 12)
        private String password;

        @Column(name = "ROLE")
        @JsonProperty(value = "roles")
        private List<String> role = new ArrayList<>();

        @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL)
        @Column(name = "Employee_Payroll")
        @ElementCollection
        @Embedded
        @JsonIgnore
        private List<EmployeePayroll> employeePayrollList = new ArrayList<>();

        @JsonIgnore
        private int failedLogins;

        public Employee() {
        }

        public Employee(@NotNull String name, @NotNull String lastName, @NotNull String email, @NotNull String password) {
            this.name = name;
            this.lastName = lastName;
            this.email = email;
            this.password = password;
            this.failedLogins = 0;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastName() {
            return lastName;
        }

        public void setLastName(String lastName) {
            this.lastName = lastName;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return this.password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

    //    public List<Authorities> getRole() {
    //        return role;
    //    }
    //
    //    public void setRole(Authorities authority) {
    //        this.role.add(authority);
    //    }

        public List<String> getRole() {
            return this.role.stream().sorted().toList();
        }

        public void setRole(String role) {
            this.role.add("ROLE_" + role);
        }

        public void removeRole(String role) {
            this.role.remove(role);
        }

    //        public String getRole() {
    //        return role;
    //    }
    //
    //    public void setRole(String role) {
    //        this.role = "ROLE_" + role;
    //    }

        @JsonIgnore
        public List<EmployeePayroll> getEmployeePaymentList() {
            employeePayrollList.sort(periodComparator);
            return employeePayrollList;
        }

        @JsonIgnore
        public void setEmployeePaymentList(List<EmployeePayroll> employeePayrollList) {
            this.employeePayrollList = employeePayrollList;
        }

        public int getFailedLogins() {
            return failedLogins;
        }

        public void setFailedLogins(int failedLogins) {
            this.failedLogins = failedLogins;
        }

        public void addEmployeePayroll(EmployeePayroll employeePayroll) {
            this.employeePayrollList.add(employeePayroll);
        }

        @Transient
        Comparator<EmployeePayroll> periodComparator = (o1, o2) -> {
            SimpleDateFormat dateFormat = new SimpleDateFormat("MMMM-yyyy", Locale.ENGLISH);
            try {
                Date date1 = dateFormat.parse(o1.getPeriod());
                Date date2 = dateFormat.parse(o2.getPeriod());
                return date2.compareTo(date1);
            } catch (ParseException e) {
                e.printStackTrace();
            }
            return 0;
        };


        @Override
        public String toString() {
            return "User{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", lastName='" + lastName + '\'' +
                    ", email='" + email + '\'' +
                    ", password='" + password + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/account/config/AppConfiguration.java
  visible: true
  text: |
    package account.config;

    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.context.ApplicationEventPublisher;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.context.annotation.Primary;
    import com.fasterxml.jackson.databind.DeserializationFeature;
    import org.springframework.security.authentication.AuthenticationEventPublisher;
    import org.springframework.security.authentication.DefaultAuthenticationEventPublisher;

    @Configuration
    public class AppConfiguration {
        @Bean
        @Primary
        public ObjectMapper objectMapper() {
            return new ObjectMapper().enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        }

        @Bean
        @Primary
        public AuthenticationEventPublisher authenticationEventPublisher
                (ApplicationEventPublisher applicationEventPublisher) {
            return new DefaultAuthenticationEventPublisher(applicationEventPublisher);
        }
    }
  learner_created: true
- name: src/account/exceptions/UserIsLocked.java
  visible: true
  text: |+
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.security.authentication.DisabledException;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.UNAUTHORIZED, reason = "User account is locked")
    public class UserIsLocked extends DisabledException {

        public UserIsLocked(String msg) {
            super(msg);
        }

        public UserIsLocked(String msg, Throwable cause) {
            super(msg, cause);
        }
    }

  learner_created: true
- name: src/account/repositories/AuthoritiesRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.Authorities;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface AuthoritiesRepository extends JpaRepository<Authorities, String> {
    }
  learner_created: true
- name: src/account/BreachedPasswords.java
  visible: true
  text: |
    package account;

    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.List;

    @Component
    public class BreachedPasswords {
        private ArrayList<String> breachedPasswords;

        public BreachedPasswords() {
            this.breachedPasswords = new ArrayList<>(List.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                    "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                    "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"));
        }

        public List<String> listOfBreachedPasswords() {

            List<String> breachedPasswords = new ArrayList<>(this.breachedPasswords);

            return breachedPasswords;
        }

        @Override
        public String toString() {
            return "BreachedPasswords{" +
                    "breachedPasswords=" + breachedPasswords +
                    '}';
        }
    }
  learner_created: true
- name: src/account/exceptions/CannotCombineRoles.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The user cannot combine administrative and business roles!")
    public class CannotCombineRoles extends RuntimeException {

        public CannotCombineRoles() {
        }

        public CannotCombineRoles(String message) {
            super(message);
        }

        public CannotCombineRoles(String message, Throwable cause) {
            super(message, cause);
        }

        public CannotCombineRoles(Throwable cause) {
            super(cause);
        }

        public CannotCombineRoles(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/entities/EmployeePayroll.java
  visible: true
  text: |
    package account.entities;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import jakarta.persistence.*;

    import java.time.LocalDate;
    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;
    import java.util.Date;
    import java.util.Objects;

    @Entity
    @Table(name = "Employee_Payroll")
    public class EmployeePayroll implements Comparable<EmployeePayroll>{

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id_payroll")
        private long payrollId;

        @JsonIgnore
        @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
        @JoinColumn(name = "user_id")
        private Employee employee;

        private String name;

        private String lastname;

        private String period;

        private String salary;

        public EmployeePayroll() {
        }

        public EmployeePayroll(Employee employee) {
            this.employee = employee;
            this.name = employee.getName();
            this.lastname = employee.getLastName();
        }

        public Employee getEmployee() {
            return employee;
        }

        public void setEmployee(Employee employee) {
            this.employee = employee;
        }

        public void setSalary(String salary) {
            this.salary = salary;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("MM-yyyy");
            YearMonth yearMonth = YearMonth.parse(period, inputFormatter);

            DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("MMMM-yyyy");

            this.period = yearMonth.format(outputFormatter);
        }

        public String getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = String.format("%d dollar(s) %d cent(s)", salary / 100, salary % 100);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            EmployeePayroll that = (EmployeePayroll) o;
            return Objects.equals(name, that.name) && Objects.equals(lastname, that.lastname) && Objects.equals(period, that.period) && Objects.equals(salary, that.salary);
        }

        @Override
        public int hashCode() {
            return Objects.hash(name, lastname, period, salary);
        }


        @Override
        public String toString() {
            return "EmployeePayment{" +
                    "name='" + name + '\'' +
                    ", lastname='" + lastname + '\'' +
                    ", period='" + period + '\'' +
                    ", salary='" + salary + '\'' +
                    '}';
        }

        @Override
        public int compareTo(EmployeePayroll o) {
            return this.period.compareTo(o.getPeriod());
        }
    }
  learner_created: true
- name: src/account/exceptions/BadRequest.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Some error message")
    public class BadRequest extends RuntimeException {

        public BadRequest() {
            super();
        }

        public BadRequest(String message) {
            super(message);
        }

        public BadRequest(String message, Throwable cause) {
            super(message, cause);
        }

        public BadRequest(Throwable cause) {
            super(cause);
        }

        public BadRequest(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/exceptions/AccessDenied.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.FORBIDDEN, reason = "Access Denied!")
    public class AccessDenied extends RuntimeException {
        public AccessDenied() {
        }

        public AccessDenied(String message) {
            super(message);
        }

        public AccessDenied(String message, Throwable cause) {
            super(message, cause);
        }

        public AccessDenied(Throwable cause) {
            super(cause);
        }

        public AccessDenied(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/exceptions/RestAuthenticationEntryPoint.java
  visible: true
  text: |+
    package account.exceptions;

    import jakarta.servlet.ServletException;
    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }


  learner_created: true
- name: src/account/repositories/EmployeeRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.Employee;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    }
  learner_created: true
- name: src/account/service/EmployeePayrollService.java
  visible: true
  text: |
    package account.service;

    import account.entities.EmployeePayroll;

    public interface EmployeePayrollService {

        void save(EmployeePayroll employeePayroll);
        String dateYearMonthFormatter(String period);
    }
  learner_created: true
- name: src/account/repositories/UserRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.User;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;


    @Repository
    public interface UserRepository extends JpaRepository<User, String> {
    }
  learner_created: true
- name: src/account/service/UserServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.dto.SuccessfulPassword;
    import account.repositories.UserRepository;
    import account.entities.Employee;
    import account.entities.User;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.List;

    @Service
    @Transactional
    public class UserServiceImpl implements UserService {

        private UserRepository userRepository;
        private PasswordEncoder encoder;

        @Autowired
        public UserServiceImpl(UserRepository userRepository, PasswordEncoder encoder) {
            this.userRepository = userRepository;
            this.encoder = encoder;
        }

        /* Method to create a new user. It takes an employee email and password, here in this method we set the value of
        *  enabled to '1' and then save the user to the database. */
        @Override
        public void saveNewUser(Employee employee) {
            User tempUser = new User(employee);
            tempUser.setEnabled(1);
            this.userRepository.save(tempUser);
        }

        @Override
        public User findUserByUsername(String username) {
            for (User x : getAllUsers()) {
                if (x.getUsername().equals(username)) {
                    return x;
                }
            }
            return null;
        }

        @Override
        public SuccessfulPassword changePassword(Employee employee) {
            saveNewUser(employee);
            return new SuccessfulPassword(employee.getEmail(), "The password has been updated successfully");
        }

        @Override
        public void updateUser(User user) {
            this.userRepository.save(user);
        }

        @Override
        public void deleteUser(String username) {
            for (User userOnList : getAllUsers()) {
                if (userOnList.getUsername().equalsIgnoreCase(username)) {
                    this.userRepository.delete(userOnList);
                }
            }
        }

        @Override
        public void disableUser(Employee employee) {
            User tempUser = findUserByUsername(employee.getEmail());
            tempUser.setEnabled(0);
            updateUser(tempUser);
        }

        @Override
        public void enableUser(Employee employee) {
            User tempUser = findUserByUsername(employee.getEmail());
            tempUser.setEnabled(1);
            updateUser(tempUser);
        }

        @Override
        public void lockUser(Employee employee) {
            User tempUser = findUserByUsername(employee.getEmail());
    //        tempUser.setAccountNonLocked(false);
            updateUser(tempUser);
        }

        @Override
        public List<User> getAllUsers() {
            return this.userRepository.findAll();
        }
    }
  learner_created: true
- name: src/account/service/UserService.java
  visible: true
  text: |
    package account.service;

    import account.dto.SuccessfulPassword;
    import account.entities.Employee;
    import account.entities.User;

    import java.util.List;

    public interface UserService {
        void saveNewUser(Employee employee);
        User findUserByUsername(String username);
        void updateUser(User user);
        SuccessfulPassword changePassword(Employee employee);
        void deleteUser(String username);

        void disableUser(Employee employee);

        void enableUser(Employee employee);

        void lockUser(Employee employee);

        List<User> getAllUsers();

    }
  learner_created: true
- name: src/account/controllers/BusinessLogicController.java
  visible: true
  text: |
    package account.controllers;

    import account.dto.StatusSuccessful;
    import account.dto.UploadPayroll;
    import account.entities.Employee;
    import account.entities.EmployeePayroll;
    import account.exceptions.BadRequest;
    import account.service.AuthoritiesServiceImpl;
    import account.service.EmployeeServiceImpl;
    import account.service.UserServiceImpl;
    import jakarta.validation.Valid;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import java.util.ArrayList;
    import java.util.List;

    @RestController
    @Validated
    public class BusinessLogicController {

        private EmployeeServiceImpl employeeService;
        private UserServiceImpl userService;
        private AuthoritiesServiceImpl authoritiesService;

        @Autowired
        public BusinessLogicController(EmployeeServiceImpl employeeService, UserServiceImpl userService, AuthoritiesServiceImpl authoritiesService) {
            this.employeeService = employeeService;
            this.userService = userService;
            this.authoritiesService = authoritiesService;
        }

        @PostMapping("/api/acct/payments")
        public ResponseEntity<?> uploadPayrolls(@RequestBody @Valid List<UploadPayroll> uploadPayroll) {
            List<UploadPayroll> testEmployeePayment = new ArrayList<>(uploadPayroll);
            Employee tempEmployee = this.employeeService.getEmployeeByEmail(testEmployeePayment.get(0).getEmail());

            if (tempEmployee == null) {
                throw new BadRequest();
            } else {
                this.employeeService.setEmployeePayment(tempEmployee, testEmployeePayment);
                return ResponseEntity.ok().body(new StatusSuccessful("Added successfully!"));
            }

        }

        @PutMapping("/api/acct/payments")
        public ResponseEntity<?> changeSalary(@RequestBody @Valid List<UploadPayroll> uploadPayroll) {
            List<UploadPayroll> testEmployeePayment = new ArrayList<>(uploadPayroll);
            Employee tempEmployee = this.employeeService.getEmployeeByEmail(testEmployeePayment.get(0).getEmail());

            if (tempEmployee == null) {
                throw new BadRequest();
            } else {
                this.employeeService.updatePayrolls(tempEmployee, testEmployeePayment);
                return ResponseEntity.ok().body(new StatusSuccessful("Updated successfully!"));
            }
        }

        /* Method that takes return an Employee payroll, it returns an entire Employee payroll if no period is on the input
           that is if the period is == null.

           If a period is on the parameter then it's going to return the employee payroll from that specific period. */
        @GetMapping("/api/empl/payment")
        public ResponseEntity<?> getEmployeePayroll(Authentication auth, @RequestParam(required = false) String period) {
            String user = auth.getName().toLowerCase();
            Employee testEmployee = this.employeeService.getEmployeeByEmail(user);

            if (testEmployee == null) {
                return ResponseEntity.badRequest().body("User doesnt exist");
            }

            if (period == null) {
                return ResponseEntity.ok().body(testEmployee.getEmployeePaymentList());
            } else {
                EmployeePayroll singleEmployeePayroll = this.employeeService.getSinglePayroll(testEmployee, period);
                return ResponseEntity.ok().body(singleEmployeePayroll);
            }
        }


    }
  learner_created: true
- name: src/account/entities/User.java
  visible: true
  text: |
    package account.entities;

    import jakarta.persistence.Column;
    import jakarta.persistence.Entity;
    import jakarta.persistence.Id;
    import jakarta.persistence.Table;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.Collections;

    @Entity
    @Table(name = "users")
    public class User implements UserDetails {

        @Id
        @Column(name = "username", columnDefinition = "VARCHAR_IGNORECASE")
        private String username;

        @Column(name = "password")
        private String password;

        @Column(name = "enabled")
        private int enabled;

    //    @Column(name = "locked")
    //    private boolean isAccountLocked;


        public User() {
        }

        public User(Employee employee) {
            this.username = employee.getEmail();
            this.password = employee.getPassword();
    //        this.isAccountNonLocked = false;
        }

        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

    //    public void setAccountNonLocked(boolean trueOrFalse) {
    //        this.isAccountNonLocked = trueOrFalse;
    //    }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return Collections.emptyList();
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public int getEnabled() {
            return enabled;
        }

        public void setEnabled(int enabled) {
            this.enabled = enabled;
        }


    }
  learner_created: true
- name: src/account/dto/MessageStatus.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;

    @JsonPropertyOrder({"user", "status"})
    public class MessageStatus {

        @JsonProperty(value = "user")
        private String username;

        @JsonProperty(value = "status")
        private String status;

        public MessageStatus() {
        }

        public MessageStatus(String user, String status) {
            this.username = user;
            this.status = status;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }

        @Override
        public String toString() {
            return "MessageStatus{" +
                    "username='" + username + '\'' +
                    ", status='" + status + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/account/exceptions/SamePassword.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The passwords must be different!")
    public class SamePassword extends RuntimeException {

        public SamePassword() {
            super();
        }

        public SamePassword(String message) {
            super(message);
        }

        public SamePassword(String message, Throwable cause) {
            super(message, cause);
        }

        public SamePassword(Throwable cause) {
            super(cause);
        }

        public SamePassword(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/config/SecurityConfig.java
  visible: true
  text: |+
    package account.config;


    //import account.exceptions.RestAuthenticationEntryPoint;

    //import account.exceptions.CustomAccessDeniedHandler;
    //import account.exceptions.CustomAuthenticationFailureHandler;

    import account.entities.LogEntry;
    import account.service.LogServiceImpl;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.provisioning.JdbcUserDetailsManager;
    import org.springframework.security.provisioning.UserDetailsManager;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.security.web.SecurityFilterChain;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import javax.sql.DataSource;
    import java.util.Calendar;
    import java.util.LinkedHashMap;
    import java.util.Map;


    @Configuration
    @EnableWebSecurity
    public class SecurityConfig {
        @Autowired
        private AuthenticationEntryPoint restAuthenticationEntryPoint;

        @Autowired
        private LogServiceImpl logService;

        @Bean
        public UserDetailsManager userDetailsManager(DataSource dataSource) {
            return new JdbcUserDetailsManager(dataSource);
        }

        @Bean
        public SecurityFilterChain configure(HttpSecurity http) throws Exception {
            http
                    .httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint)
                    .and()
                    .csrf(csrf -> {
                        csrf.disable();
                        csrf.ignoringRequestMatchers("/h2-console/**");
                    })
                    .headers(headers -> headers.frameOptions().disable())
                    .authorizeHttpRequests(auth -> {
                        auth.requestMatchers("/h2-console/**").permitAll();
                        auth.requestMatchers(HttpMethod.POST, "/api/auth/signup", "/actuator/shutdown").permitAll();
                        auth.requestMatchers(HttpMethod.POST, "/api/auth/changepass").hasAnyRole("USER", "ACCOUNTANT", "ADMINISTRATOR");
                        auth.requestMatchers(HttpMethod.GET, "/api/empl/payment").hasAnyRole("USER", "ACCOUNTANT");
                        auth.requestMatchers(HttpMethod.POST, "/api/acct/payments").hasRole("ACCOUNTANT");
                        auth.requestMatchers(HttpMethod.PUT, "/api/acct/payments").hasRole("ACCOUNTANT");
                        auth.requestMatchers(HttpMethod.GET, "/api/admin/user/").hasAnyRole("ADMINISTRATOR");
                        auth.requestMatchers(HttpMethod.DELETE, "/api/admin/user/**").hasAnyRole("ADMINISTRATOR");
                        auth.requestMatchers(HttpMethod.PUT, "/api/admin/user/role/**").hasAnyRole("ADMINISTRATOR");
                        auth.requestMatchers(HttpMethod.PUT, "/api/admin/user/role").hasAnyRole("ADMINISTRATOR");
                        auth.requestMatchers(HttpMethod.PUT, "/api/admin/user/access").hasAnyRole("ADMINISTRATOR");
                        auth.requestMatchers(HttpMethod.GET, "/api/security/events/**").hasRole("AUDITOR");
                        try {
                            auth.anyRequest().permitAll()
                                    .and()
                                    .exceptionHandling().accessDeniedHandler(getAccessDeniedHandler());
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        }
                    });

            http
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS);


            return http.build();
        }

        @Bean
        public PasswordEncoder encoder() {
            return new BCryptPasswordEncoder(13);
        }

        @Bean
        public AccessDeniedHandler getAccessDeniedHandler() {
            return (request, response, accessDeniedException) -> {
                response.setStatus(HttpStatus.FORBIDDEN.value());
                response.setContentType(MediaType.APPLICATION_JSON_VALUE);


                //Removing 'uri=' from the path
                String path = request.getRequestURI();
                path = path.replace("uri=", "");

                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> responseBody = new LinkedHashMap<>();

                responseBody.put("timestamp", Calendar.getInstance().getTime());
                responseBody.put("status", HttpStatus.FORBIDDEN.value());
                responseBody.put("error", "Forbidden");
                responseBody.put("message", "Access Denied!");
                responseBody.put("path", path);

                Authentication auth = SecurityContextHolder.getContext().getAuthentication();
                String username = auth.getName();

                this.logService.save(new LogEntry(username, "ACCESS_DENIED", path, path));

                response.getOutputStream()
                        .println(objectMapper.writeValueAsString(responseBody));
            };
        }
    }





  learner_created: true
- name: src/account/service/LogService.java
  visible: true
  text: |
    package account.service;

    import account.entities.LogEntry;

    import java.util.List;

    public interface LogService {
        void save(LogEntry log);

        List<LogEntry> getLogs();
    }
  learner_created: true
- name: src/account/exceptions/BreachedPassword.java
  visible: true
  text: |
    package account.exceptions;


    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The password is in the hacker's database!")
    public class BreachedPassword extends RuntimeException {

        public BreachedPassword() {
        }

        public BreachedPassword(String message) {
            super(message);
        }

        public BreachedPassword(String message, Throwable cause) {
            super(message, cause);
        }

        public BreachedPassword(Throwable cause) {
            super(cause);
        }

        public BreachedPassword(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/exceptions/UserExistException.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User exist!")
    public class UserExistException extends RuntimeException {

        public UserExistException() {
            super();
        }

        public UserExistException(String message) {
            super(message);
        }

        public UserExistException(String message, Throwable cause) {
            super(message, cause);
        }

        public UserExistException(Throwable cause) {
            super(cause);
        }

        public UserExistException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }

    }
  learner_created: true
- name: src/account/dto/UploadPayroll.java
  visible: true
  text: |
    package account.dto;


    import com.fasterxml.jackson.annotation.JsonFormat;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import jakarta.validation.constraints.*;

    import java.util.Objects;


    @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY)
    public class UploadPayroll {

        @NotEmpty
        @JsonProperty(value = "employee")
        private String email;

        @NotEmpty
        @JsonProperty(value = "period")
        @Pattern(regexp = "([0][1-9]|[1][0-2])(-{1})(\\d{1,})")
        private String period;

        @Min(value = 0L, message = "Salary can't be negative")
        private Long salary;

        public UploadPayroll() {
        }

        public UploadPayroll(@NotNull String email, @NotNull String period, @NotNull Long salary) {
            this.email = email;
            this.period = period;
            this.salary = salary;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            this.period = period;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            UploadPayroll that = (UploadPayroll) o;
            return Objects.equals(email, that.email) && Objects.equals(period, that.period) && Objects.equals(salary, that.salary);
        }

        @Override
        public int hashCode() {
            return Objects.hash(email, period, salary);
        }

        @Override
        public String toString() {
            return "EmployeePayroll{" +
                    "email='" + email + '\'' +
                    ", yearMonth='" + period + '\'' +
                    ", salary=" + salary +
                    '}';
        }
    }
  learner_created: true
- name: src/account/exceptions/RoleNotFound.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "Role not found!")
    public class RoleNotFound extends RuntimeException{

        public RoleNotFound() {
        }

        public RoleNotFound(String message) {
            super(message);
        }

        public RoleNotFound(String message, Throwable cause) {
            super(message, cause);
        }

        public RoleNotFound(Throwable cause) {
            super(cause);
        }

        public RoleNotFound(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/exceptions/ControllerExceptionHandler.java
  visible: true
  text: |
    package account.exceptions;

    import jakarta.servlet.http.HttpServletResponse;
    import jakarta.validation.ConstraintViolationException;
    import org.apache.coyote.Response;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.HttpStatusCode;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.authentication.DisabledException;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import java.io.IOException;
    import java.time.LocalDateTime;
    import java.util.Date;
    import java.util.LinkedHashMap;
    import java.util.Map;

    @ControllerAdvice
    public class ControllerExceptionHandler extends ResponseEntityExceptionHandler {

        @Override
        protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {
            String error = "Bad Request";
            String message = "Password length must be 12 chars minimum!";

            //Removing 'uri=' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            Map<String, Object> body = new LinkedHashMap<>();
            body.put("timestamp", LocalDateTime.now());
            body.put("status", status.value());
            body.put("error", error);
            body.put("message", message);
            body.put("path", path);

    //        // Custom error messages based on validation errors
    //        List<String> errorMessages = ex.getBindingResult().getFieldErrors().stream()
    //                .map(fieldError -> {
    //                    if (fieldError.getField().equals("password")){
    //                        //Custom error message for password validation
    //                        if (fieldError.getRejectedValue().toString().length() < 12) {
    //                            return "Password length must be 12 chars minimum!";
    //                        }
    //                    }
    //                    return fieldError.getDefaultMessage();
    //                })
    //                .collect(Collectors.toList());

            return new ResponseEntity<>(body, headers, status);
        }

        @ExceptionHandler(DisabledException.class)
        public ResponseEntity<Object> handleDisabledException() {
            // Create a custom error response
            CustomErrorMessage errorResponse = new CustomErrorMessage(
                    LocalDateTime.now(),  // timestamp
                    HttpStatus.UNAUTHORIZED.value(),  // status
                    "Unauthorized",  // error
                    "User account is locked",  // custom message
                    "cock"  // original message
                    // ... other fields if needed
            );

            return new ResponseEntity<>(errorResponse, HttpStatus.UNAUTHORIZED);
        }



        @ExceptionHandler(UserExistException.class)
        public ResponseEntity<CustomErrorMessage> handleUserExists(UserExistException e, WebRequest request) {
            String error = "Bad Request";
            String message = "User exist!";

            //Removing 'uri=' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.BAD_REQUEST.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(UnauthorizedUser.class)
        public ResponseEntity<CustomErrorMessage> handleUnauthorized(WebRequest request) {
            String error = "Unauthorized";
            String message = "";

            //Removing 'uri=' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.UNAUTHORIZED.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.UNAUTHORIZED);

        }

        @ExceptionHandler(BreachedPassword.class)
        public ResponseEntity<CustomErrorMessage> handlePasswordNotLongEnough(WebRequest request) {
            String error = "Bad Request";
            String message = "The password is in the hacker's database!";

            //Removing 'uri=' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.BAD_REQUEST.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(SamePassword.class)
        public ResponseEntity<CustomErrorMessage> handleSamePassword(WebRequest request) {
            String error = "Bad Request";
            String message = "The passwords must be different!";

            //Removing 'uri=' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.BAD_REQUEST.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }


        @ExceptionHandler(BadRequest.class)
        public ResponseEntity<CustomErrorMessage> badRequest(WebRequest request) {
            String error = "Bad Request";
            String message = "Error!";

            //Removing 'uri"' from the path
            String path = request.getDescription(false);
            path = path.replace("uri=", "");

            CustomErrorMessage body = new CustomErrorMessage(
                    LocalDateTime.now(),
                    HttpStatus.BAD_REQUEST.value(),
                    error,
                    message,
                    path
            );

            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler({ConstraintViolationException.class, org.hibernate.exception.ConstraintViolationException.class})
        public void springHandleNotFound(HttpServletResponse response) throws IOException {
            response.sendError(HttpStatus.BAD_REQUEST.value());
        }
    }
  learner_created: true
- name: src/account/exceptions/UnauthorizedUser.java
  visible: true
  text: |
    package account.exceptions;

    public class UnauthorizedUser extends RuntimeException {

        public UnauthorizedUser() {
            super();
        }

        public UnauthorizedUser(String message) {
            super(message);
        }

        public UnauthorizedUser(String message, Throwable cause) {
            super(message, cause);
        }

        public UnauthorizedUser(Throwable cause) {
            super(cause);
        }

        public UnauthorizedUser(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/exceptions/UserMustHaveOneRole.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The user must have at least one role!")
    public class UserMustHaveOneRole extends RuntimeException {

        public UserMustHaveOneRole() {
        }

        public UserMustHaveOneRole(String message) {
            super(message);
        }

        public UserMustHaveOneRole(String message, Throwable cause) {
            super(message, cause);
        }

        public UserMustHaveOneRole(Throwable cause) {
            super(cause);
        }

        public UserMustHaveOneRole(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/controllers/SecurityController.java
  visible: true
  text: |
    package account.controllers;

    import account.service.LogServiceImpl;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    @RequestMapping("/api/security")
    public class SecurityController {

        @Autowired
        private LogServiceImpl logService;

        @GetMapping("/events/")
        public ResponseEntity<?> getLogs() {
            if (this.logService.getLogs().size() == 0) {
                return ResponseEntity.ok().body("{" + this.logService.getLogs() + "}");
            } else {
                return ResponseEntity.ok().body(this.logService.getLogs());
            }
        }

    }
  learner_created: true
- name: src/account/repositories/LogRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.LogEntry;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface LogRepository extends JpaRepository<LogEntry, Integer> {
    }
  learner_created: true
- name: src/account/dto/AssignUserAccess.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import jakarta.validation.constraints.NotEmpty;
    import jakarta.validation.constraints.NotNull;

    public class AssignUserAccess {

        @JsonProperty(value = "user")
        @NotEmpty
        private String employeeUsername;

        @NotEmpty
        private String operation;

        public AssignUserAccess() {
        }

        public AssignUserAccess(@NotNull String employeeUsername, @NotNull String operation) {
            this.employeeUsername = employeeUsername;
            this.operation = operation;
        }

        public String getEmployeeUsername() {
            return employeeUsername;
        }

        public void setEmployeeUsername(String employeeUsername) {
            this.employeeUsername = employeeUsername;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }
    }
  learner_created: true
- name: src/account/entities/Authorities.java
  visible: true
  text: |
    package account.entities;

    import jakarta.persistence.*;

    import java.util.List;

    @Entity
    @Table(name = "authorities")
    public class Authorities {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private int authority_id;

        @Column(name = "username", columnDefinition = "VARCHAR_IGNORECASE")
        private String username;

        @Column(name = "authority")
        private String role;

        public Authorities() {
        }

        public Authorities(Employee employee) {
            this.username = employee.getEmail();
            this.role = employee.getEmail();
        }

        public Authorities(Employee employee, String role) {
            this.username = employee.getEmail();
            this.role = "ROLE_" + role;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }


        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = "ROLE_" + role;
        }
    }
  learner_created: true
- name: src/account/entities/LogEntry.java
  visible: true
  text: |
    package account.entities;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import jakarta.persistence.*;
    import jakarta.validation.constraints.NotEmpty;
    import org.springframework.cglib.core.Local;

    import java.time.LocalDate;
    import java.time.LocalDateTime;
    import java.util.ArrayList;
    import java.util.List;

    //@Entity
    //@Table(name = "Log_Entry")
    @Entity
    public class LogEntry {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
    //    @ManyToOne
        @JsonIgnore
        private int id;

        @NotEmpty
        @JsonIgnore
        private String date;

        @NotEmpty
        private String action;

        @NotEmpty
        private String subject;

        @NotEmpty
        private String object;

        @NotEmpty
        private String path;

    //    @ElementCollection
    //    private List<LogEntry> logEntryList = new ArrayList<>();

        public LogEntry() {
        }

        public LogEntry(String subject, String action, String object, String path) {
            this.date = String.valueOf(LocalDateTime.now());
            this.subject = subject;
            this.action = action;
            this.object = object;
            this.path = path;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getDate() {
            return date;
        }

        public void setDate(String date) {
            this.date = date;
        }

        public String getSubject() {
            return subject;
        }

        public void setSubject(String subject) {
            this.subject = subject;
        }

        public String getAction() {
            return action;
        }

        public void setAction(String action) {
            this.action = action;
        }

        public String getObject() {
            return object;
        }

        public void setObject(String object) {
            this.object = object;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }

        @Override
        public String toString() {
            return "LogEntry{" +
                    "id=" + id +
                    ", action='" + action + '\'' +
                    ", subject='" + subject + '\'' +
                    ", object='" + object + '\'' +
                    ", path='" + path + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/account/dto/PasswordChange.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import jakarta.validation.constraints.NotEmpty;
    import jakarta.validation.constraints.Size;


    public class PasswordChange {

        @NotEmpty
        @Size(min = 12)
        @JsonProperty(value = "new_password")
        private String newPassword;

        public PasswordChange() {
        }

        public PasswordChange(String newPassword) {
            this.newPassword = newPassword;
        }

        public String getNewPassword() {
            return newPassword;
        }

        public void setNewPassword(String newPassword) {
            this.newPassword = newPassword;
        }
    }
  learner_created: true
- name: src/account/exceptions/CannotRemoveAdministrator.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Can't remove ADMINISTRATOR role!")
    public class CannotRemoveAdministrator extends RuntimeException {

        public CannotRemoveAdministrator() {
        }

        public CannotRemoveAdministrator(String message) {
            super(message);
        }

        public CannotRemoveAdministrator(String message, Throwable cause) {
            super(message, cause);
        }

        public CannotRemoveAdministrator(Throwable cause) {
            super(cause);
        }

        public CannotRemoveAdministrator(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/account/dto/AssignUserRole.java
  visible: true
  text: |
    package account.dto;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.ArrayList;
    import java.util.List;

    public class AssignUserRole {
        @JsonProperty(value = "user")
        private String username;
        @JsonProperty(value = "role")
        private String role;
        @JsonProperty(value = "operation")
        private String operation;

        public AssignUserRole() {
        }

        public AssignUserRole(String username, String role, String operation) {
            this.username = username;
            this.role = role;
            this.operation = operation;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }

        @Override
        public String toString() {
            return "AssignUserRole{" +
                    "username='" + username + '\'' +
                    ", role='" + role + '\'' +
                    ", operation='" + operation + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/account/dto/SuccessfulPassword.java
  visible: true
  text: |
    package account.dto;

    public class SuccessfulPassword {
        private String email;
        private String status;

        public SuccessfulPassword() {
        }

        public SuccessfulPassword(String email, String status) {
            this.email = email;
            this.status = status;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }
    }
  learner_created: true
- name: src/account/controllers/AuthenticationController.java
  visible: true
  text: |
    package account.controllers;

    import account.AuthenticationFailureEvent;
    import account.BreachedPasswords;
    import account.entities.LogEntry;
    import account.dto.PasswordChange;
    import account.dto.SuccessfulPassword;
    import account.entities.Employee;
    import account.exceptions.BreachedPassword;
    import account.exceptions.SamePassword;
    import account.exceptions.UserExistException;
    import account.service.AuthoritiesServiceImpl;
    import account.service.EmployeeServiceImpl;
    import account.service.LogServiceImpl;
    import account.service.UserServiceImpl;
    import jakarta.validation.Valid;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;

    @RestController
    @Validated
    @RequestMapping("/api/auth")
    public class AuthenticationController {

        private EmployeeServiceImpl employeeService;
        private UserServiceImpl userService;
        private AuthoritiesServiceImpl authoritiesService;
        private BreachedPasswords breachedPasswords;
        private AuthenticationFailureEvent authenticationFailureEvent;
        private LogServiceImpl logService;

        @Autowired
        public AuthenticationController(EmployeeServiceImpl employeeService,
                                        UserServiceImpl userService,
                                        AuthoritiesServiceImpl authoritiesService,
                                        BreachedPasswords breachedPasswords,
                                        AuthenticationFailureEvent authenticationFailureEvent,
                                        LogServiceImpl logService) {
            this.employeeService = employeeService;
            this.userService = userService;
            this.authoritiesService = authoritiesService;
            this.breachedPasswords = breachedPasswords;
            this.authenticationFailureEvent = authenticationFailureEvent;
            this.logService = logService;
        }


    //    public AuthenticationController(EmployeeServiceImpl employeeService, UserServiceImpl userService, AuthoritiesServiceImpl authoritiesService, BreachedPasswords breachedPasswords) {
    //        this.employeeService = employeeService;
    //        this.userService = userService;
    //        this.authoritiesService = authoritiesService;
    //        this.breachedPasswords = breachedPasswords;
    //    }


        @PostMapping("/signup")
        public ResponseEntity<?> signUser(@Valid @RequestBody Employee employee) {
            boolean userExists = this.employeeService.doUserExists(employee.getEmail());
            employee.setEmail(employee.getEmail().toLowerCase());

            if (userExists) {
                throw new UserExistException();
            } else {
                this.employeeService.saveNewEmployee(employee);
                this.logService.save(new LogEntry("Anonymous", "CREATE_USER", employee.getEmail(), "/api/auth/signup"));
                return ResponseEntity.ok().body(employee);
            }
        }

        @PostMapping("/changepass")
        public ResponseEntity<?> changePassword(Authentication auth, @Valid @RequestBody PasswordChange newPassword) {
            String username = auth.getName();
            boolean breachedPassword = this.employeeService.breachedPassword(newPassword.getNewPassword());
            boolean samePassword = this.employeeService.samePassword(username, newPassword.getNewPassword());


            if (breachedPassword) {
                throw new BreachedPassword();
            } else if (samePassword) {
                throw new SamePassword();
            } else {
                //Consider doing this inside the employee service
                Employee tempEmployee = this.employeeService.changePassword(username, newPassword.getNewPassword());
                SuccessfulPassword successfulPassword = this.userService.changePassword(tempEmployee);
                this.logService.save(new LogEntry(auth.getName(), "CHANGE_PASSWORD", tempEmployee.getEmail(), "/api/auth/changepass"));
                return ResponseEntity.ok().body(successfulPassword);
            }

        }

        @GetMapping("/block")
        public void lockUser(Authentication auth) {
            Employee tempEmployee = this.employeeService.getEmployeeByEmail(auth.getName());

            this.userService.lockUser(tempEmployee);
        }
    }
  learner_created: true
- name: src/account/service/EmployeeServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.BreachedPasswords;
    import account.dto.AssignUserAccess;
    import account.dto.AssignUserRole;
    import account.dto.UploadPayroll;
    import account.entities.EmployeePayroll;
    import account.exceptions.BadRequest;
    import account.exceptions.BreachedPassword;
    import account.exceptions.CannotCombineRoles;
    import account.exceptions.CannotRemoveAdministrator;
    import account.repositories.EmployeeRepository;
    import account.entities.Employee;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    @Service
    @Transactional
    public class EmployeeServiceImpl implements EmployeeService {

        private EmployeeRepository employeeRepository;
        private AuthoritiesServiceImpl authoritiesService;
        private UserServiceImpl userService;
        private PasswordEncoder encoder;
        private BreachedPasswords breachedPasswords;
        private EmployeePayrollServiceImpl employeePayrollService;

        public EmployeeServiceImpl(EmployeeRepository employeeRepository,
                                   AuthoritiesServiceImpl authoritiesService,
                                   UserServiceImpl userService,
                                   PasswordEncoder encoder,
                                   BreachedPasswords breachedPasswords,
                                   EmployeePayrollServiceImpl employeePayrollService) {
            this.employeeRepository = employeeRepository;
            this.authoritiesService = authoritiesService;
            this.userService = userService;
            this.encoder = encoder;
            this.breachedPasswords = breachedPasswords;
            this.employeePayrollService = employeePayrollService;
        }

        /* This method adds a new Employee to the database, before storing the employee it checks if the password is
         *  breached, and then encode the password using Bcrypt with a strength of 13 */
        @Override
        public void saveNewEmployee(Employee employee) {
            this.authoritiesService.save(employee);

            //Assigning a bcrypt password to the employee
            breachedPassword(employee.getPassword());
            employee.setPassword(encoder.encode(employee.getPassword()));

            this.userService.saveNewUser(employee);

            //Persisting the employee to the 'Employees' table
            this.employeeRepository.save(employee);
        }

        @Override
        @Transactional
        public void updateEmployee(Employee employee) {
            this.employeeRepository.save(employee);
        }

        @Override
        public Employee getEmployeeByEmail(String email) {
            for (Employee x : getAllEmployees()) {
                if (x.getEmail().equalsIgnoreCase(email)) {
                    return x;
                }
            }
            return null;
        }

        /* Method that receives an employee and a list of UploadPayroll objects to convert it to EmployeePayroll objects
         * which are used to save this info on the database and adds the values to the current employee in their List<EmployeePayroll> list.
         *  Then it proceeds to update the employee with this new info to persist it on the database.
         *
         * If the employee is different from the original that was passed on the method then it changes employee based
         * on their values, a user must be registered on the database, otherwise an exception will be thrown
         *
         * An employee payroll period should be unique, this means that it cannot be paid twice or more on the same period. */
        @Override
        @Transactional
        public void setEmployeePayment(Employee employee, List<UploadPayroll> uploadPayrollList) {
    //        List<EmployeePayroll> employeePayrollList = new ArrayList<>();

            //Convert the data from UploadPayroll Object to EmployeePayroll
            for (UploadPayroll x : uploadPayrollList) {
                Employee tempEmployee = getEmployeeByEmail(x.getEmail());

                if (tempEmployee == null) {
                    throw new BadRequest();
                } else if (!tempEmployee.equals(employee)) {
                    employee = tempEmployee;
                }

                EmployeePayroll employeePayrollInfo = new EmployeePayroll(tempEmployee);
                employeePayrollInfo.setPeriod(x.getPeriod());
                employeePayrollInfo.setSalary(x.getSalary());

                //This is to check if there's repeated periods
                for (EmployeePayroll payroll : tempEmployee.getEmployeePaymentList()) {
                    if (payroll.getPeriod().equalsIgnoreCase(employeePayrollInfo.getPeriod())) {
                        throw new BadRequest();
                    }
                }

                //Saving the employeePayrollInfo to the table on the database and adding the payroll to the respective employee
                this.employeePayrollService.save(employeePayrollInfo);
                tempEmployee.addEmployeePayroll(employeePayrollInfo);
                updateEmployee(tempEmployee);
            }
        }

        /* */

        @Override
        @Transactional
        public void updatePayrolls(Employee employee, List<UploadPayroll> uploadPayrollList) {
            List<EmployeePayroll> employeePayrollList = new ArrayList<>();

            //Convert the data from UploadPayroll Object to EmployeePayroll
            for (UploadPayroll x : uploadPayrollList) {
                if (employee.getEmail().equalsIgnoreCase(x.getEmail())) {
                    EmployeePayroll employeePayrollInfo = new EmployeePayroll(employee);
                    employeePayrollInfo.setPeriod(x.getPeriod());
                    employeePayrollInfo.setSalary(x.getSalary());
                    employeePayrollList.add(employeePayrollInfo);
                }
            }
            updateOldPayrollWithNewPayroll(employee, employeePayrollList);
            updateEmployee(employee);
        }

        public void updateOldPayrollWithNewPayroll(Employee employee, List<EmployeePayroll> employeePayrollList) {
            for (EmployeePayroll newPayrollInfo : employeePayrollList) {
                for (EmployeePayroll oldPayrollInfo : employee.getEmployeePaymentList()) {
                    if (newPayrollInfo.getPeriod().equals(oldPayrollInfo.getPeriod())) {
                        oldPayrollInfo.setSalary(newPayrollInfo.getSalary());
                    }
                }
            }
        }

        @Override
        public boolean doUserExists(String email) {
            for (Employee x : getAllEmployees()) {
                if (x.getEmail().equalsIgnoreCase(email)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public EmployeePayroll getSinglePayroll(Employee employee, String period) {
            period = formatMonthNumberToMonthName(period);

            for (EmployeePayroll x : employee.getEmployeePaymentList()) {
                if (x.getPeriod().equals(period)) {
                    return x;
                }
            }
            throw new BadRequest();
        }

        /* Formatting the period from "numberOfMonth-yyyy" to "nameOfMonth-yyyy" and checking if it matches the regex
         *  if it doesn't a new BadRequest exception is going to be thrown */
        public String formatMonthNumberToMonthName(String period) {
            Pattern pattern = Pattern.compile("([0][1-9]|[1][0-2])(-{1})(\\d{1,})");
            Matcher patternPeriodMatcher = pattern.matcher(period);
            if (!patternPeriodMatcher.matches()) {
                throw new BadRequest();
            }
            period = this.employeePayrollService.dateYearMonthFormatter(period);
            return period;
        }

    //    @Override
    //    @Transactional
    //    public void updateEmployeeRole(Employee employee, String role) {
    ////        this.authoritiesService.assignCustomRole(employee, role);
    //            updateEmployee(this.authoritiesService.updateAuthorities(employee, role));
    //
    //    }

    //    @Override
    //    @Transactional
    //    public void updateEmployeeRole(AssignUserRole assignUserRole) {
    //
    //
    ////        this.authoritiesService.removeOrGrant(operation);
    ////        this.authoritiesService.assignCustomRole(employee, role);
    ////        updateEmployee(this.authoritiesService.grantAuthority(employee, role));
    //
    //    }


        @Override
        public boolean samePassword(String email, String newPassword) {
            for (Employee x : getAllEmployees()) {
                if (x.getEmail().equals(email)) {
                    return encoder.matches(newPassword, x.getPassword());
                }
            }
            return false;
        }

        @Override
        public boolean breachedPassword(String newPassword) {
            for (String x : this.breachedPasswords.listOfBreachedPasswords()) {
                if (x.equals(newPassword)) {
                    throw new BreachedPassword();
                }
            }
            return false;
        }

        @Override
        public Employee changePassword(String username, String newPassword) {
            Employee tempEmployee = getEmployeeByEmail(username);
            tempEmployee.setPassword(this.encoder.encode(newPassword));
            updateEmployee(tempEmployee);

            return tempEmployee;
        }


        @Transactional
        @Override
        public String removeOrGrant(AssignUserRole assignUserRole) {
            Employee employee = getEmployeeByEmail(assignUserRole.getUsername());
            String role = assignUserRole.getRole();
            String operation = assignUserRole.getOperation();


            switch (operation.toUpperCase()) {
                case "GRANT" -> {
                    if (!this.authoritiesService.isUserAdmin(employee) && role.equalsIgnoreCase("ADMINISTRATOR")) {
                        //Admin cannot have roles
                        throw new CannotCombineRoles();
                    }
                    updateEmployee(this.authoritiesService.grantAuthority(employee, role));
                    return "GRANT_ROLE";
                }
                case "REMOVE" -> {
                    if (this.authoritiesService.isUserAdmin(employee)) {
                        //throw exception user is admin, cannot have roles
                        throw new CannotRemoveAdministrator();
                    }
                    updateEmployee(this.authoritiesService.deleteUserRole(employee, role));
                    return "REMOVE_ROLE";
                }
                default -> {
                    //throw exception here
                    throw new BadRequest();
                }
            }
        }

        @Override
        @Transactional
        public void deleteEmployee(Employee employee) {
            String username = employee.getEmail();

            this.authoritiesService.deleteAllRoles(username);
            this.userService.deleteUser(username);
            this.employeeRepository.delete(employee);
        }

        @Override
        public void failedLogin(Employee employee) {
            employee.setFailedLogins(employee.getFailedLogins() + 1);
            updateEmployee(employee);
        }

        @Override
        public void disableEmployee(Employee employee) {
            this.userService.disableUser(employee);
        }

    //    @Override
    //    public void enableEmployee(Employee employee) {
    //        this.userService.enableUser(employee);
    //        resetLoginAttempts(employee);
    //    }

        @Override
        public void maxOutLoginAttempts(Employee employee) {
            employee.setFailedLogins(12);
            updateEmployee(employee);
        }

        @Transactional
        @Override
        public void resetLoginAttempts(Employee employee) {
            employee.setFailedLogins(0);
            updateEmployee(employee);
        }

        @Override
        public String lockOrUnlockUser(AssignUserAccess assignUserAccess) {
            Employee tempEmployee = getEmployeeByEmail(assignUserAccess.getEmployeeUsername());
            String operation = assignUserAccess.getOperation();

            switch (operation.toUpperCase()) {
                case "LOCK" -> {
                    this.userService.disableUser(tempEmployee);
                    maxOutLoginAttempts(tempEmployee);
                    return "LOCK_USER";
                }
                case "UNLOCK" -> {
                    this.userService.enableUser(tempEmployee);
                    resetLoginAttempts(tempEmployee);
                    return "UNLOCK_USER";
                }
                default -> {
                    throw new BadRequest();
                }
            }
        }

        @Override
        public List<Employee> getAllEmployees() {
            return this.employeeRepository.findAll();
        }
    }
  learner_created: true
- name: src/account/exceptions/UserNotFound.java
  visible: true
  text: |
    package account.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "User not found!")
    public class UserNotFound extends RuntimeException {
        public UserNotFound() {
        }

        public UserNotFound(String message) {
            super(message);
        }

        public UserNotFound(String message, Throwable cause) {
            super(message, cause);
        }

        public UserNotFound(Throwable cause) {
            super(cause);
        }

        public UserNotFound(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
  learner_created: true
- name: src/resources/keystore/keystore.p12
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/217/stages/1092/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 28 Jun 2023 17:48:19 UTC"
record: -1
